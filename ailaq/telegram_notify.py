# ailaq/telegram_notify.py
import logging
import requests
from telegram import Bot
from django.conf import settings
from asgiref.sync import sync_to_async

from ailaq.enums import ClientGenderEnum, PsychologistGenderEnum, CommunicationLanguageEnum
from ailaq.models import PsychologistProfile

logger = logging.getLogger(__name__)

def send_telegram_message_sync(telegram_id, text):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–∏–≥–Ω–∞–ª–µ (–±–µ–∑ async/await)"""
    try:
        url = f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": telegram_id,
            "text": text,
            "parse_mode": "Markdown"
        }
        response = requests.post(url, json=payload)
        response.raise_for_status()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram-—Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def get_approved_psychologists():
    psychologists = await sync_to_async(
        lambda: list(PsychologistProfile.objects.filter(user__telegram_id__isnull=False).select_related('user', 'application'))
    )()

    logging.info(f"–ù–∞–π–¥–µ–Ω–æ –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤ —Å Telegram ID: {len(psychologists)}")

    approved_psychologists = [
        p for p in psychologists if p.application and p.application.status == 'APPROVED'
    ]

    logging.info(f"–û–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤: {len(approved_psychologists)}")

    return approved_psychologists


async def notify_all_psychologists(consultation):
    approved_psychologists = await get_approved_psychologists()

    client_name = consultation.client_name if consultation.client_name else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    logging.info(f"Client Name: {client_name}")

    # Handle language code directly (KZ treated as KK)
    language = ', '.join([CommunicationLanguageEnum[lang].value if lang != 'KZ' else '–ö–∞–∑–∞—Ö—Å–∫–∏–π'
                          for lang in consultation.psychologist_language
                          if lang in CommunicationLanguageEnum.__members__])

    gender = ', '.join([ClientGenderEnum[gen].value for gen in consultation.psychologist_gender]) if isinstance(
        consultation.psychologist_gender, list) else ClientGenderEnum[consultation.psychologist_gender].value

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º PROBLEMS_LIST –≤ —Å–ª–æ–≤–∞—Ä—å
    problems_dict = {
        'aggression': '–ê–≥—Ä–µ—Å—Å–∏—è, —Å—Å–æ—Ä—ã –∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã',
        'pregnancy': '–ë–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å –∏ –º–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–æ',
        'badHabits': '–í—Ä–µ–¥–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏',
        'depression': '–î–µ–ø—Ä–µ—Å—Å–∏—è –∏ —Å—Ç—Ä–µ—Å—Å',
        'lifeCrisis': '–ñ–∏–∑–Ω–µ–Ω–Ω—ã–µ –∫—Ä–∏–∑–∏—Å—ã',
        'choice': '–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å —Å –≤—ã–±–æ—Ä–æ–º',
        'isolation': '–ò–∑–æ–ª—è—Ü–∏—è –∏ —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞',
        'career': '–ö–∞—Ä—å–µ—Ä–∞, —Ñ–∏–Ω–∞–Ω—Å—ã –∏ –ø–ª–∞–Ω—ã –Ω–∞ –∂–∏–∑–Ω—å',
        'identityCrisis': '–ö—Ä–∏–∑–∏—Å—ã –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏ –∏ —Å–∞–º–æ–≤–æ—Å–ø—Ä–∏—è—Ç–∏—è',
        'development': '–ú–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏ —Å–∞–º–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ',
        'sleepDisorder': '–ù–∞—Ä—É—à–µ–Ω–∏–µ —Å–Ω–∞ –∏ –±–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞',
        'unknownEmotions': '–ù–µ–ø–æ–Ω—è—Ç–Ω—ã–µ —ç–º–æ—Ü–∏–∏',
        'lowSelfEsteem': '–ù–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–µ–±–µ',
        'panicAttacks': '–ü–∞–Ω–∏—á–µ—Å–∫–∏–µ –∞—Ç–∞–∫–∏',
        'relationshipBoundaries': '–ü—Ä–æ–±–ª–µ–º—ã —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö',
        'procrastination': '–ü—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è –∏ –≤—ã–≥–æ—Ä–∞–Ω–∏–µ',
        'psychosomatics': '–ü—Å–∏—Ö–æ—Å–æ–º–∞—Ç–∏–∫–∞ –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ',
        'eatingDisorder': '–†–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–∏—â–µ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è',
        'sexualRelationships': '–°–µ–∫—Å—É–∞–ª—å–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è',
        'communication': '–°–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ –æ–±—â–µ–Ω–∏–∏ —Å –ª—é–¥—å–º–∏',
        'relationships': '–°–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö',
        'selfRelationships': '–°–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö —Å —Å–æ–±–æ–π',
        'family': '–°–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ —Å–µ–º—å–µ',
        'adaptation': '–°–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫ –Ω–æ–≤—ã–º –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º',
        'children': '–°–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –¥–µ—Ç—å–º–∏',
        'selfEsteem': '–°–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å —Å–∞–º–æ–æ—Ü–µ–Ω–∫–æ–π',
        'fearOfChange': '–°—Ç—Ä–∞—Ö –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–º–µ–Ω–∞–º–∏ –∏–ª–∏ –Ω–æ–≤—ã–º –æ–ø—ã—Ç–æ–º',
        'anxiety': '–¢—Ä–µ–≤–æ–≥–∞ –∏ —Å—Ç—Ä–∞—Ö–∏',
        'loss': '–£—Ç—Ä–∞—Ç–∞ –±–ª–∏–∑–∫–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞',
        'guilt': '–ß—É–≤—Å—Ç–≤–æ –≤–∏–Ω—ã –∏–ª–∏ —Å—Ç—ã–¥–∞',
        'loneliness': '–ß—É–≤—Å—Ç–≤–æ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–∞',
        'other': '–î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞'
    }

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–º—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º problems_dict
    topic = ', '.join([problems_dict.get(item, item) for item in consultation.topic])

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª –ø—Å–∏—Ö–æ–ª–æ–≥–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø–æ–ª—é –∫–ª–∏–µ–Ω—Ç–∞)
    psychologist_gender = ', '.join(
        [PsychologistGenderEnum[gen].value for gen in consultation.psychologist_gender]
        if isinstance(consultation.psychologist_gender, list)
        else [PsychologistGenderEnum[consultation.psychologist_gender].value]
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞
    preferred_min_age = getattr(consultation, 'preferred_psychologist_age_min', None)
    preferred_max_age = getattr(consultation, 'preferred_psychologist_age_max', None)
    age_info = f"–í–æ–∑—Ä–∞—Å—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞: –æ—Ç {preferred_min_age} –¥–æ {preferred_max_age}" if preferred_min_age and preferred_max_age else "–í–æ–∑—Ä–∞—Å—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤
    message = (
        f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –±—ã—Å—Ç—Ä—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n"
        f"üë§ –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {client_name}\n"
        f"–Ø–∑—ã–∫: {language}\n"
        f"–ü–æ–ª –∫–ª–∏–µ–Ω—Ç–∞: {gender}, –≤–æ–∑—Ä–∞—Å—Ç: {consultation.age}\n"
        f"–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: –ø—Å–∏—Ö–æ–ª–æ–≥ {psychologist_gender}, {age_info}\n"
        f"–¢–µ–º–∞: {topic}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {consultation.comments or '–Ω–µ—Ç'}\n\n"
        f"–ï—Å–ª–∏ –≤—ã –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /accept_{consultation.id}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø—Å–∏—Ö–æ–ª–æ–≥—É
    for p in approved_psychologists:
        try:
            dynamic_bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
            await dynamic_bot.send_message(chat_id=p.user.telegram_id, text=message)
            logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Å–∏—Ö–æ–ª–æ–≥—É —Å ID {p.user.telegram_id}")
        except Exception as e:
            logging.error(f"[TELEGRAM] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Å–∏—Ö–æ–ª–æ–≥—É {p.user_id}: {e}")

def notify_client_about_direct_request(telegram_id, psychologist_name):
    text = (
        f"üì© –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Å–∏—Ö–æ–ª–æ–≥—É *{psychologist_name}*.\n"
        "–û–Ω –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ Telegram."
    )
    send_telegram_message_sync(telegram_id, text)

def notify_client_about_request_sent(telegram_id):
    text = (
        "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∞–º!\n"
        "–°–∫–æ—Ä–æ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö –ø—Ä–∏–º–µ—Ç –µ—ë –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ Telegram. –û–∂–∏–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
    )
    send_telegram_message_sync(telegram_id, text)