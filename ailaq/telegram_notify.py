# ailaq/telegram_notify.py
import logging
import requests
from telegram import Bot
from django.conf import settings
from asgiref.sync import sync_to_async
from ailaq.models import PsychologistProfile

logger = logging.getLogger(__name__)

def send_telegram_message_sync(telegram_id, text):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–∏–≥–Ω–∞–ª–µ (–±–µ–∑ async/await)"""
    try:
        url = f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": telegram_id,
            "text": text,
            "parse_mode": "Markdown"
        }
        response = requests.post(url, json=payload)
        response.raise_for_status()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram-—Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def get_approved_psychologists():
    psychologists = await sync_to_async(
        lambda: list(PsychologistProfile.objects.filter(user__telegram_id__isnull=False).select_related('user', 'application'))
    )()

    logging.info(f"–ù–∞–π–¥–µ–Ω–æ –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤ —Å Telegram ID: {len(psychologists)}")

    approved_psychologists = [
        p for p in psychologists if p.application and p.application.status == 'APPROVED'
    ]

    logging.info(f"–û–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤: {len(approved_psychologists)}")

    return approved_psychologists

async def notify_all_psychologists(consultation):
    approved_psychologists = await get_approved_psychologists()

    # Check if preferred_psychologist_age_min and preferred_psychologist_age_max exist
    preferred_min_age = getattr(consultation, 'preferred_psychologist_age_min', None)
    preferred_max_age = getattr(consultation, 'preferred_psychologist_age_max', None)

    # If either is None, use a default message
    if preferred_min_age is not None and preferred_max_age is not None:
        age_info = f"–í–æ–∑—Ä–∞—Å—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞: –æ—Ç {preferred_min_age} –¥–æ {preferred_max_age}"
    else:
        age_info = "–í–æ–∑—Ä–∞—Å—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω"

    message = (
        f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –±—ã—Å—Ç—Ä—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n"
        f"–Ø–∑—ã–∫: {consultation.psychologist_language}\n"
        f"–ü–æ–ª –∫–ª–∏–µ–Ω—Ç–∞: {consultation.gender}, –≤–æ–∑—Ä–∞—Å—Ç: {consultation.age}\n"
        f"–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: –ø—Å–∏—Ö–æ–ª–æ–≥ {consultation.psychologist_gender}, "
        f"{age_info}\n"  # Use age_info instead of directly using the fields
        f"–¢–µ–º–∞: {consultation.topic}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {consultation.comments or '–Ω–µ—Ç'}\n\n"
        f"–ï—Å–ª–∏ –≤—ã –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /accept_{consultation.id}"
    )

    for p in approved_psychologists:
        try:
            dynamic_bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
            await dynamic_bot.send_message(chat_id=p.user.telegram_id, text=message)
            logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Å–∏—Ö–æ–ª–æ–≥—É —Å ID {p.user.telegram_id}")
        except Exception as e:
            logging.error(f"[TELEGRAM] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Å–∏—Ö–æ–ª–æ–≥—É {p.user_id}: {e}")

def notify_client_about_direct_request(telegram_id, psychologist_name):
    text = (
        f"üì© –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Å–∏—Ö–æ–ª–æ–≥—É *{psychologist_name}*.\n"
        "–û–Ω –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ Telegram."
    )
    send_telegram_message_sync(telegram_id, text)

def notify_client_about_request_sent(telegram_id):
    text = (
        "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∞–º!\n"
        "–°–∫–æ—Ä–æ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö –ø—Ä–∏–º–µ—Ç –µ—ë –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ Telegram. –û–∂–∏–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
    )
    send_telegram_message_sync(telegram_id, text)