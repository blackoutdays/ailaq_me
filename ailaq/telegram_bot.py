import logging
import asyncio
import os
import django
import nest_asyncio
import requests

nest_asyncio.apply()

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "config.settings")
django.setup()

from django.contrib.auth import get_user_model
from django.conf import settings
from asgiref.sync import sync_to_async
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
import telegram

from ailaq.models import Session, Review, PsychologistProfile, ClientProfile
bot = telegram.Bot(token=settings.TELEGRAM_BOT_TOKEN)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

User = get_user_model()

async def get_psychologist_profile(telegram_id):
    return await sync_to_async(PsychologistProfile.objects.get)(telegram_id=telegram_id)

async def get_client_profile(telegram_id):
    return await sync_to_async(ClientProfile.objects.get)(telegram_id=telegram_id)

async def send_welcome_message(telegram_id):
    """–ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç Telegram ID"""
    await bot.send_message(telegram_id, "üëã –ü—Ä–∏–≤–µ—Ç! –¢–µ–ø–µ—Ä—å —è –º–æ–≥—É –ø–∏—Å–∞—Ç—å –≤–∞–º –ø–µ—Ä–≤—ã–º.")


async def link_telegram_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç Telegram ID –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
    """
    telegram_id = update.effective_chat.id
    username = update.effective_chat.username or f"user_{telegram_id}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º Telegram ID
    user = await sync_to_async(User.objects.filter(telegram_id=telegram_id).first)()

    if user:
        await update.message.reply_text(" –í—ã —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —Å–∏—Å—Ç–µ–º–µ!")
    else:
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        user = await sync_to_async(User.objects.create)(
            telegram_id=telegram_id,
            email=f"{telegram_id}@telegram.local",
            username=username,
            is_active=True,
        )
        await sync_to_async(ClientProfile.objects.create)(user=user, full_name=username)

        await update.message.reply_text(" –í–∞—à Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!")
        await send_welcome_message(telegram_id)

async def schedule_session(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏.")

async def send_telegram_message(telegram_id, text):
    url = f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": telegram_id,
        "text": text,
        "parse_mode": "Markdown"
    }
    response = requests.post(url, json=payload)
    response.raise_for_status()

async def process_session_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    psychologist_id = update.message.text
    client_id = update.effective_chat.id

    try:
        psychologist_profile = await get_psychologist_profile(int(psychologist_id))
        client_profile = await get_client_profile(client_id)

        await sync_to_async(Session.objects.create)(
            psychologist=psychologist_profile,
            client=client_profile,
            status="SCHEDULED",
        )
        await update.message.reply_text("–°–µ—Å—Å–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∞. –ü—Å–∏—Ö–æ–ª–æ–≥ –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª—ë–Ω.")
        await bot.send_message(
            chat_id=psychologist_profile.telegram_id,
            text="–£ –≤–∞—Å –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–µ—Å—Å–∏—é.",
        )
    except PsychologistProfile.DoesNotExist:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ü—Å–∏—Ö–æ–ª–æ–≥ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except ClientProfile.DoesNotExist:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ö–ª–∏–µ–Ω—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except ValueError:
        await update.message.reply_text("–û—à–∏–±–∫–∞: Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

async def leave_review(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏.")

def notify_client_to_leave_review(session: Session):
    if not session.review_requested and session.client.telegram_id:
        text = (
            f"üôè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –≤–∞—à—É —Å–µ—Å—Å–∏—é —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º {session.psychologist.user.get_full_name()}.\n"
            "–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5 –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤."
        )
        send_telegram_message(session.client.telegram_id, text)
        session.review_requested = True
        session.save()

pending_reviews = {}

async def process_review(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.effective_chat.id
    client = await sync_to_async(User.objects.get)(clientprofile__telegram_id=telegram_id)

    try:
        session = await sync_to_async(Session.objects.filter)(
            client=client.clientprofile,
            status="COMPLETED",
            review_requested=True,
            review_submitted=False
        ).latest("end_time")

        text = update.message.text.strip()
        if text.isdigit() and 1 <= int(text) <= 5:
            pending_reviews[telegram_id] = {"rating": int(text)}
            await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞.")
        elif telegram_id in pending_reviews:
            rating = pending_reviews[telegram_id]["rating"]
            review = await sync_to_async(Review.objects.create)(
                session=session,
                client=client.clientprofile,
                psychologist=session.psychologist,
                rating=rating,
                text=text
            )
            session.review_submitted = True
            await sync_to_async(session.save)()
            del pending_reviews[telegram_id]
            await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
        else:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")
    except Session.DoesNotExist:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π –±–µ–∑ –æ—Ç–∑—ã–≤–∞.")

async def main() -> None:
    application = ApplicationBuilder().token(settings.TELEGRAM_BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ Telegram ID (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
    application.add_handler(CommandHandler("start", link_telegram_user))

    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    application.add_handler(MessageHandler(filters.Regex("–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ—Å—Å–∏—é"), schedule_session))
    application.add_handler(MessageHandler(filters.Regex("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"), leave_review))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, process_session_request))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, process_review))

    await application.run_polling()

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())