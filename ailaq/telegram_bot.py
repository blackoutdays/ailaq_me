import logging
from datetime import datetime
import os
import django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "config.settings")
django.setup()

import nest_asyncio
import asyncio
nest_asyncio.apply()

import requests
from ailaq.telegram_bot import send_telegram_message
from django.utils.timezone import now

from ailaq.models import QuickClientConsultationRequest
from django.contrib.auth import get_user_model
from django.conf import settings
from asgiref.sync import sync_to_async
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
import telegram

from ailaq.models import Session, Review, PsychologistProfile, ClientProfile
bot = telegram.Bot(token=settings.TELEGRAM_BOT_TOKEN)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

User = get_user_model()
pending_reviews = {}

def matches_age(birth_date, preferred_age):
    if not birth_date:
        return False
    age = (datetime.today().date() - birth_date).days // 365
    if preferred_age == 'AGE_18_25':
        return 18 <= age <= 25
    elif preferred_age == 'AGE_26_35':
        return 26 <= age <= 35
    elif preferred_age == 'AGE_36_50':
        return 36 <= age <= 50
    elif preferred_age == 'AGE_50_PLUS':
        return age > 50
    return False

async def get_psychologist_profile(telegram_id):
    return await sync_to_async(PsychologistProfile.objects.get)(telegram_id=telegram_id)

async def get_client_profile(telegram_id):
    return await sync_to_async(ClientProfile.objects.get)(telegram_id=telegram_id)

async def send_welcome_message(telegram_id):
    """–ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç Telegram ID"""
    await bot.send_message(telegram_id, "üëã –ü—Ä–∏–≤–µ—Ç! –¢–µ–ø–µ—Ä—å —è –º–æ–≥—É –ø–∏—Å–∞—Ç—å –≤–∞–º –ø–µ—Ä–≤—ã–º.")

async def link_telegram_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç Telegram ID –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
    """
    telegram_id = update.effective_chat.id
    username = update.effective_chat.username or f"user_{telegram_id}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º Telegram ID
    user = await sync_to_async(User.objects.filter(telegram_id=telegram_id).first)()

    if user:
        await update.message.reply_text(" –í—ã —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —Å–∏—Å—Ç–µ–º–µ!")
    else:
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        user = await sync_to_async(User.objects.create)(
            telegram_id=telegram_id,
            email=f"{telegram_id}@telegram.local",
            username=username,
            is_active=True,
        )
        await sync_to_async(ClientProfile.objects.create)(user=user, full_name=username)

        await update.message.reply_text(" –í–∞—à Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!")
        await send_welcome_message(telegram_id)

async def schedule_session(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏.")

async def send_telegram_message(telegram_id, text):
    url = f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": telegram_id,
        "text": text,
        "parse_mode": "Markdown"
    }
    response = requests.post(url, json=payload)
    response.raise_for_status()

async def process_session_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    psychologist_id = update.message.text
    client_id = update.effective_chat.id

    try:
        psychologist_profile = await get_psychologist_profile(int(psychologist_id))
        client_profile = await get_client_profile(client_id)

        await sync_to_async(Session.objects.create)(
            psychologist=psychologist_profile,
            client=client_profile,
            status="SCHEDULED",
        )
        await update.message.reply_text("–°–µ—Å—Å–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∞. –ü—Å–∏—Ö–æ–ª–æ–≥ –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª—ë–Ω.")
        await bot.send_message(
            chat_id=psychologist_profile.telegram_id,
            text="–£ –≤–∞—Å –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–µ—Å—Å–∏—é.",
        )
    except PsychologistProfile.DoesNotExist:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ü—Å–∏—Ö–æ–ª–æ–≥ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except ClientProfile.DoesNotExist:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ö–ª–∏–µ–Ω—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except ValueError:
        await update.message.reply_text("–û—à–∏–±–∫–∞: Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

async def remind_review(consultation):
    try:
        client_profile = await get_client_profile(consultation.telegram_id)
        text = (
            f"üîî –ü—Ä–æ—à–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è –ø–æ –∑–∞—è–≤–∫–µ '{consultation.topic}'?\n"
            f"–ï—Å–ª–∏ –ø—Ä–æ—à–ª–∞ ‚Äî –æ—Ü–µ–Ω–∏—Ç–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∞. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –º—ã –Ω–∞–ø–æ–º–Ω–∏–º –ø–æ–∑–∂–µ."
        )
        await send_telegram_message(consultation.telegram_id, text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: {e}")

async def notify_all_psychologists(consultation):
    from ailaq.telegram_bot import send_telegram_message
    psychologists = PsychologistProfile.objects.filter(
        user__telegram_id__isnull=False,
        application__status='APPROVED'
    )

    message = (
        f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –±—ã—Å—Ç—Ä—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n"
        f"–Ø–∑—ã–∫: {consultation.psychologist_language}\n"
        f"–ü–æ–ª –∫–ª–∏–µ–Ω—Ç–∞: {consultation.gender}, –≤–æ–∑—Ä–∞—Å—Ç: {consultation.age}\n"
        f"–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: –ø—Å–∏—Ö–æ–ª–æ–≥ {consultation.psychologist_gender}, "
        f"–≤–æ–∑—Ä–∞—Å—Ç: {consultation.preferred_psychologist_age}\n"
        f"–¢–µ–º–∞: {consultation.topic}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {consultation.comments}\n\n"
        f"–ï—Å–ª–∏ –≤—ã –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º ‚Äî –æ—Ç–≤–µ—Ç—å—Ç–µ /accept_{consultation.id}"
    )

    for p in psychologists:
        await send_telegram_message(p.user.telegram_id, message)


async def accept_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message.text.strip()
    chat_id = update.effective_chat.id

    if not message.startswith("/accept_"):
        return

    try:
        consultation_id = int(message.split("_", 1)[1])
        consultation = await sync_to_async(QuickClientConsultationRequest.objects.get)(id=consultation_id)
        if consultation.taken_by:
            await update.message.reply_text("‚õî –ó–∞—è–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞ –¥—Ä—É–≥–∏–º –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º.")
            return

        psychologist = await get_psychologist_profile(chat_id)
        app = psychologist.application

        if not (
            app.status == 'APPROVED' and
            app.gender == consultation.psychologist_gender and
            app.communication_language == consultation.psychologist_language and
            matches_age(app.birth_date, consultation.preferred_psychologist_age)
        ):
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –¥–ª—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏.")
            return

        client_profile = await get_client_profile(consultation.telegram_id)
        await sync_to_async(Session.objects.create)(
            psychologist=psychologist,
            client=client_profile,
            status="SCHEDULED",
            start_time=now()
        )

        # –ü–æ–º–µ—á–∞–µ–º –∑–∞—è–≤–∫—É –∫–∞–∫ –ø—Ä–∏–Ω—è—Ç—É—é —ç—Ç–∏–º –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º
        consultation.taken_by = psychologist
        await sync_to_async(consultation.save)()

        # üîπ –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Å–∏—Ö–æ–ª–æ–≥–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞
        await send_telegram_message(
            psychologist.user.telegram_id,
            f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {consultation.client_name}\n"
            f"üì© Telegram ID –∫–ª–∏–µ–Ω—Ç–∞: {consultation.telegram_id}\n"
            f"üë§ –í–æ–∑—Ä–∞—Å—Ç: {consultation.age}, –ü–æ–ª: {consultation.gender}\n"
            f"üß† –¢–µ–º–∞: {consultation.topic}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {consultation.comments}"
        )

        await send_telegram_message(
            psychologist.user.telegram_id,
            f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {consultation.client_name}\n"
            f"Telegram: {consultation.telegram_id}\n"
            f"–¢–µ–º–∞: {consultation.topic}"
        )
        await send_telegram_message(
            consultation.telegram_id,
            "ü§ù –í–∞—à—É –∑–∞—è–≤–∫—É –ø—Ä–∏–Ω—è–ª –ø—Å–∏—Ö–æ–ª–æ–≥. –°–µ—Å—Å–∏—è —Å–∫–æ—Ä–æ –Ω–∞—á–Ω—ë—Ç—Å—è."
        )
        asyncio.get_event_loop().call_later(1800, lambda: asyncio.run(remind_review(consultation)))


    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
        logging.error(str(e))


    except QuickClientConsultationRequest.DoesNotExist:
        await update.message.reply_text("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏.")

async def leave_review(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏.")

def notify_client_to_leave_review(session: Session):
    if not session.review_requested and session.client.telegram_id:
        text = (
            f"üôè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –≤–∞—à—É —Å–µ—Å—Å–∏—é —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º {session.psychologist.user.get_full_name()}.\n"
            "–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5 –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤."
        )
        send_telegram_message(session.client.telegram_id, text)
        session.review_requested = True
        session.save()

async def process_review(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.effective_chat.id
    client = await sync_to_async(User.objects.get)(clientprofile__telegram_id=telegram_id)

    try:
        session = await sync_to_async(Session.objects.filter)(
            client=client.clientprofile,
            status="COMPLETED",
            review_requested=True,
            review_submitted=False
        ).latest("end_time")

        text = update.message.text.strip()
        if text.isdigit() and 1 <= int(text) <= 5:
            pending_reviews[telegram_id] = {"rating": int(text)}
            await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞.")
        elif telegram_id in pending_reviews:
            rating = pending_reviews[telegram_id]["rating"]
            review = await sync_to_async(Review.objects.create)(
                session=session,
                client=client.clientprofile,
                psychologist=session.psychologist,
                rating=rating,
                text=text
            )
            session.review_submitted = True
            await sync_to_async(session.save)()
            del pending_reviews[telegram_id]
            await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
        else:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")
    except Session.DoesNotExist:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π –±–µ–∑ –æ—Ç–∑—ã–≤–∞.")

async def main() -> None:
    application = ApplicationBuilder().token(settings.TELEGRAM_BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ Telegram ID (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
    application.add_handler(CommandHandler("start", link_telegram_user))

    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    application.add_handler(MessageHandler(filters.Regex("–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ—Å—Å–∏—é"), schedule_session))
    application.add_handler(MessageHandler(filters.Regex("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"), leave_review))
    application.add_handler(MessageHandler(filters.Regex("^/accept_\\d+$"), accept_request))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, process_session_request))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, process_review))

    await application.run_polling()

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())