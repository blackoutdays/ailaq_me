import logging
from datetime import datetime, timezone, timedelta
import os
import django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "config.settings")
django.setup()

import nest_asyncio
import asyncio
nest_asyncio.apply()

import requests
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import CallbackQueryHandler, ContextTypes
from ailaq.models import QuickClientConsultationRequest, PsychologistSessionRequest
from django.contrib.auth import get_user_model
from django.conf import settings
from asgiref.sync import sync_to_async
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
import telegram

from ailaq.models import Review, PsychologistProfile, ClientProfile
bot = telegram.Bot(token=settings.TELEGRAM_BOT_TOKEN)
logger = logging.getLogger(__name__)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

User = get_user_model()
pending_reviews = {}

def build_status_update_keyboard(session_id):
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("\ud83d\udcde –°–≤—è–∑–∞–ª—Å—è", callback_data=f"contact_{session_id}"),
            InlineKeyboardButton("\u274c –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è", callback_data=f"not_contacted_{session_id}")
        ],
        [
            InlineKeyboardButton("\u2705 –°–µ—Å—Å–∏—è –ø—Ä–æ—à–ª–∞", callback_data=f"complete_{session_id}"),
            InlineKeyboardButton("\u274c –°–µ—Å—Å–∏—è –Ω–µ —Å–æ—Å—Ç–æ—è–ª–∞—Å—å", callback_data=f"not_completed_{session_id}")
        ]
    ])

async def handle_status_update_callback(update, context):
    query = update.callback_query
    await query.answer()

    data = query.data
    telegram_id = query.from_user.id

    try:
        action, session_id = data.rsplit("_", 1)
        session_id = int(session_id)
        session = await sync_to_async(PsychologistSessionRequest.objects.get)(id=session_id)

        if session.psychologist.user.telegram_id != telegram_id:
            await query.edit_message_text("\u26d4\ufe0f –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —ç—Ç–æ–π –∑–∞—è–≤–∫–∏.")
            return

        status_message = ""

        if action == "contact":
            session.status = "CONTACTED"
            status_message = "\ud83d\udcde –í—ã –æ—Ç–º–µ—Ç–∏–ª–∏, —á—Ç–æ —Å–≤—è–∑–∞–ª–∏—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º."
        elif action == "not_contacted":
            session.status = "NOT_CONTACTED"
            status_message = "\u274c –í—ã –æ—Ç–º–µ—Ç–∏–ª–∏, —á—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º."
        elif action == "complete":
            session.status = "COMPLETED"
            status_message = "\u2705 –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ! –ö–ª–∏–µ–Ω—Ç—É –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤."
        elif action == "not_completed":
            session.status = "NOT_COMPLETED"
            status_message = "\u274c –í—ã –æ—Ç–º–µ—Ç–∏–ª–∏, —á—Ç–æ —Å–µ—Å—Å–∏—è –Ω–µ —Å–æ—Å—Ç–æ—è–ª–∞—Å—å."
        else:
            await query.edit_message_text("\u26a0\ufe0f –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
            return

        await sync_to_async(session.save)()
        await query.edit_message_text(status_message)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await query.edit_message_text("\u2757 –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_accept_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    if not data.startswith("accept_session_"):
        return

    session_id = int(data.split("_")[-1])
    try:
        session = await sync_to_async(PsychologistSessionRequest.objects.select_related("psychologist__user").get)(id=session_id)

        if session.taken_by:
            await bot.edit_message_reply_markup(
                chat_id=query.message.chat_id,
                message_id=query.message.message_id,
                reply_markup=None
            )
            await bot.send_message(
                chat_id=query.from_user.id,
                text="\u26d4\ufe0f –≠—Ç–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞ –¥—Ä—É–≥–∏–º –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º."
            )
            return

        session.taken_by = session.psychologist
        session.status = "CONTACTED"
        await sync_to_async(session.save)()

        new_text = query.message.text + "\n\n\ud83c\udf89 –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!"
        await bot.edit_message_text(
            chat_id=query.message.chat_id,
            message_id=query.message.message_id,
            text=new_text,
            parse_mode="Markdown"
        )

        await bot.send_message(
            chat_id=query.from_user.id,
            text=(
                f"\ud83d\udce2 –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É!\n"
                f"\ud83d\udc64 –ö–ª–∏–µ–Ω—Ç: {session.client_name}\n"
                f"\ud83c\udf10 Telegram ID: {session.telegram_id}\n"
                f"\ud83d\udc81\u200d\u2642\ufe0f –¢–µ–º–∞: {session.topic}\n"
                f"\ud83d\udcac {session.comments or '–Ω–µ—Ç'}"
            ),
            reply_markup=build_status_update_keyboard(session.id)
        )

    except Exception as e:
        logging.error(f"\u274c –û—à–∏–±–∫–∞ –≤ callback accept_session: {e}")
        await query.message.reply_text("\u26a0\ufe0f –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏")


def send_telegram_message_sync(telegram_id, text):
    url = f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": telegram_id,
        "text": text,
        "parse_mode": "Markdown"
    }
    try:
        response = requests.post(url, json=payload)
        response.raise_for_status()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram ID {telegram_id}: {e}")

def matches_age(birth_date, preferred_age):
    if not birth_date:
        return False
    age = (datetime.today().date() - birth_date).days // 365
    if preferred_age == 'AGE_18_25':
        return 18 <= age <= 25
    elif preferred_age == 'AGE_26_35':
        return 26 <= age <= 35
    elif preferred_age == 'AGE_36_50':
        return 36 <= age <= 50
    elif preferred_age == 'AGE_50_PLUS':
        return age > 50
    return False

async def get_psychologist_profile(telegram_id):
    return await sync_to_async(PsychologistProfile.objects.get)(user__telegram_id=telegram_id)

async def get_client_profile(telegram_id):
    return await sync_to_async(ClientProfile.objects.get)(user__telegram_id=telegram_id)

async def send_welcome_message(telegram_id):
    """–ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç Telegram ID"""
    await bot.send_message(telegram_id, "üëã –ü—Ä–∏–≤–µ—Ç! –¢–µ–ø–µ—Ä—å —è –º–æ–≥—É –ø–∏—Å–∞—Ç—å –≤–∞–º –ø–µ—Ä–≤—ã–º.")

async def link_telegram_user(update, context):
    telegram_id = update.effective_chat.id
    username = update.effective_chat.username or f"user_{telegram_id}"

    user = await sync_to_async(User.objects.filter(telegram_id=telegram_id).first)()

    if user:
        await update.message.reply_text("‚úÖ –í—ã —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —Å–∏—Å—Ç–µ–º–µ.")
    else:
        await update.message.reply_text(
            "üë§ –ú—ã –Ω–µ –Ω–∞—à–ª–∏ –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
            "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç –∏–ª–∏ –ø—Å–∏—Ö–æ–ª–æ–≥, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: "
            f"{settings.FRONTEND_URL}/register"
        )

async def send_telegram_message(telegram_id, text):
    url = f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": telegram_id,
        "text": text,
        "parse_mode": "Markdown"
    }
    response = requests.post(url, json=payload)
    response.raise_for_status()

async def notify_psychologist_telegram(session_request):
    try:
        session_request = await sync_to_async(
            lambda: PsychologistSessionRequest.objects.select_related("psychologist__user").get(id=session_request.id)
        )()

        telegram_id = session_request.psychologist.user.telegram_id
        if not telegram_id:
            return
        text = (
            f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞!\n"
            f"üë§ –ò–º—è: {session_request.client_name}\n"
            f"üß† –¢–µ–º–∞: {session_request.topic}\n"
            f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {session_request.age}, –ü–æ–ª: {session_request.gender}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {session_request.comments or '–Ω–µ—Ç'}"
        )

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_session_{session_request.id}")]
        ])

        await bot.send_message(
            chat_id=telegram_id,
            text=text,
            reply_markup=keyboard
        )

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞: {e}")

# Callback-—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ "–ü—Ä–∏–Ω—è—Ç–æ"
async def handle_accept_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    if not data.startswith("accept_session_"):
        return

    session_id = int(data.split("_")[-1])
    try:
        session = await sync_to_async(PsychologistSessionRequest.objects.select_related("psychologist__user").get)(id=session_id)

        # –£–∂–µ –ø—Ä–∏–Ω—è—Ç–æ
        if session.taken_by:
            await bot.edit_message_reply_markup(
                chat_id=query.message.chat_id,
                message_id=query.message.message_id,
                reply_markup=None
            )
            await bot.send_message(
                chat_id=query.from_user.id,
                text="‚õîÔ∏è –≠—Ç–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞ –¥—Ä—É–≥–∏–º –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º."
            )
            return

        # –ü–æ–º–µ—á–∞–µ–º –∑–∞—è–≤–∫—É
        session.taken_by = session.psychologist
        session.status = "CONTACTED"
        await sync_to_async(session.save)()

        # –°–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç
        new_text = query.message.text + "\n\nüéâ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!"
        await bot.edit_message_text(
            chat_id=query.message.chat_id,
            message_id=query.message.message_id,
            text=new_text,
            parse_mode="Markdown"
        )

        # –°–µ–Ω–¥ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
        await bot.send_message(
            chat_id=query.from_user.id,
            text=(
                f"üì¢ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É!"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {session.client_name}"
                f"üåê Telegram ID: {session.telegram_id}"
                f"üß† –¢–µ–º–∞: {session.topic}"
                f"üí¨ {session.comments or '–Ω–µ—Ç'}"
            )
        )

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ callback accept_session: {e}")
        await query.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏")

async def process_session_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    psychologist_id = update.message.text
    client_id = update.effective_chat.id

    try:
        psychologist_profile = await get_psychologist_profile(int(psychologist_id))
        client_profile = await get_client_profile(client_id)

        await update.message.reply_text("–°–µ—Å—Å–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∞. –ü—Å–∏—Ö–æ–ª–æ–≥ –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª—ë–Ω.")
        await bot.send_message(
            chat_id=psychologist_profile.telegram_id,
            text="–£ –≤–∞—Å –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–µ—Å—Å–∏—é.",
        )
    except PsychologistProfile.DoesNotExist:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ü—Å–∏—Ö–æ–ª–æ–≥ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except ClientProfile.DoesNotExist:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ö–ª–∏–µ–Ω—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except ValueError:
        await update.message.reply_text("–û—à–∏–±–∫–∞: Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

async def notify_client_to_leave_review(request_obj):
    if request_obj.telegram_id:
        try:
            text = (
                f"üôè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –≤–∞—à—É —Å–µ—Å—Å–∏—é —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º "
                f"{request_obj.taken_by.user.get_full_name() if request_obj.taken_by else '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º'}.\n"
                "–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5 –∏ –¥–æ–±–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤."
            )
            send_telegram_message(request_obj.telegram_id, text)
            request_obj.review_requested = True
            request_obj.save(update_fields=["review_requested"])
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞: {e}")

async def process_review(update, context):
    telegram_id = update.effective_chat.id
    message_text = update.message.text.strip()

    try:
        request_obj = await sync_to_async(PsychologistSessionRequest.objects.filter)(
            telegram_id=telegram_id, status="COMPLETED", review__isnull=True
        )
        request_obj = await sync_to_async(request_obj.latest)("created_at")
        review_type = "session"
    except PsychologistSessionRequest.DoesNotExist:
        try:
            request_obj = await sync_to_async(QuickClientConsultationRequest.objects.filter)(
                telegram_id=telegram_id, status="COMPLETED", review__isnull=True
            )
            request_obj = await sync_to_async(request_obj.latest)("created_at")
            review_type = "consultation"
        except QuickClientConsultationRequest.DoesNotExist:
            await update.message.reply_text("üòî –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π –±–µ–∑ –æ—Ç–∑—ã–≤–∞.")
            return

    if message_text.isdigit() and 1 <= int(message_text) <= 5:
        pending_reviews[telegram_id] = {
            "rating": int(message_text),
            "request_obj": request_obj,
            "review_type": review_type,
        }
        name = request_obj.taken_by.user.get_full_name() if request_obj.taken_by else "–ø—Å–∏—Ö–æ–ª–æ–≥"
        await update.message.reply_text(f"üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –¥–ª—è {name}.", parse_mode="Markdown")
    elif telegram_id in pending_reviews:
        data = pending_reviews[telegram_id]
        request_obj = data["request_obj"]
        rating = data["rating"]

        review = Review(
            rating=rating,
            text=message_text,
            client_name=request_obj.client_name,
            psychologist_name=request_obj.taken_by.user.get_full_name() if request_obj.taken_by else "–ø—Å–∏—Ö–æ–ª–æ–≥"
        )

        if data["review_type"] == "consultation":
            review.consultation_request = request_obj
        else:
            review.session_request = request_obj

        await sync_to_async(review.save)()
        del pending_reviews[telegram_id]
        await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω –ø—Å–∏—Ö–æ–ª–æ–≥—É.")
    else:
        await update.message.reply_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5.")

def notify_all_psychologists(consultation):
    from .views import bot  # —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
    psychologists = PsychologistProfile.objects.filter(
        user__telegram_id__isnull=False,
        application__status='APPROVED'
    ).select_related('user', 'application')

    logger.info(f"[TELEGRAM] –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞—è–≤–∫–∏ {consultation.id} ‚Äî –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {psychologists.count()}")

    message = (
        f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –±—ã—Å—Ç—Ä—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n"
        f"–Ø–∑—ã–∫: {consultation.psychologist_language}\n"
        f"–ü–æ–ª –∫–ª–∏–µ–Ω—Ç–∞: {consultation.gender}, –≤–æ–∑—Ä–∞—Å—Ç: {consultation.age}\n"
        f"–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: –ø—Å–∏—Ö–æ–ª–æ–≥ {consultation.psychologist_gender}, "
        f"–≤–æ–∑—Ä–∞—Å—Ç: {consultation.preferred_psychologist_age}\n"
        f"–¢–µ–º–∞: {consultation.topic}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {consultation.comments or '–Ω–µ—Ç'}\n\n"
        f"–ï—Å–ª–∏ –≤—ã –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /accept_{consultation.id}"
    )

    for p in psychologists:
        try:
            bot.send_message(chat_id=p.user.telegram_id, text=message)
        except Exception as e:
            logger.error(f"[TELEGRAM] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Å–∏—Ö–æ–ª–æ–≥—É {p.user_id}: {e}")

async def accept_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message.text.strip()
    chat_id = update.effective_chat.id

    if not message.startswith("/accept_"):
        return

    try:
        consultation_id = int(message.split("_", 1)[1])
        consultation = await sync_to_async(QuickClientConsultationRequest.objects.get)(id=consultation_id)
        if consultation.taken_by:
            await update.message.reply_text("‚õî –ó–∞—è–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞ –¥—Ä—É–≥–∏–º –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º.")
            return

        psychologist = await get_psychologist_profile(chat_id)
        app = psychologist.application

        if not (
            app.status == 'APPROVED' and
            app.gender == consultation.psychologist_gender and
            app.communication_language == consultation.psychologist_language and
            matches_age(app.birth_date, consultation.preferred_psychologist_age)
        ):
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –¥–ª—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏.")
            return

        client_profile = await get_client_profile(consultation.telegram_id)

        # –ü–æ–º–µ—á–∞–µ–º –∑–∞—è–≤–∫—É –∫–∞–∫ –ø—Ä–∏–Ω—è—Ç—É—é —ç—Ç–∏–º –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º
        consultation.taken_by = psychologist
        await sync_to_async(consultation.save)()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Å–∏—Ö–æ–ª–æ–≥–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞
        await send_telegram_message(
            psychologist.user.telegram_id,
            f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {consultation.client_name}\n"
            f"üì© Telegram ID –∫–ª–∏–µ–Ω—Ç–∞: {consultation.telegram_id}\n"
            f"üë§ –í–æ–∑—Ä–∞—Å—Ç: {consultation.age}, –ü–æ–ª: {consultation.gender}\n"
            f"üß† –¢–µ–º–∞: {consultation.topic}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {consultation.comments}"
        )

        await send_telegram_message(
            psychologist.user.telegram_id,
            f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {consultation.client_name}\n"
            f"Telegram: {consultation.telegram_id}\n"
            f"–¢–µ–º–∞: {consultation.topic}"
        )
        await send_telegram_message(
            consultation.telegram_id,
            "ü§ù –í–∞—à—É –∑–∞—è–≤–∫—É –ø—Ä–∏–Ω—è–ª –ø—Å–∏—Ö–æ–ª–æ–≥. –°–µ—Å—Å–∏—è —Å–∫–æ—Ä–æ –Ω–∞—á–Ω—ë—Ç—Å—è."
        )
        # asyncio.get_event_loop().call_later(1800, lambda: asyncio.run(remind_review(consultation)))

    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
        logging.error(str(e))

    except QuickClientConsultationRequest.DoesNotExist:
        await update.message.reply_text("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏.")

async def leave_review(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏.")

async def remind_psychologists_about_pending_sessions():
    threshold = timezone.now() - timedelta(hours=2)
    pending = PsychologistSessionRequest.objects.filter(
        status="PENDING",
        created_at__lt=threshold,
        psychologist__user__telegram_id__isnull=False
    )

    for session in pending:
        await send_telegram_message(
            session.psychologist.user.telegram_id,
            f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –∑–∞—è–≤–∫—É –æ—Ç {session.client_name}, –Ω–æ –µ—â—ë –Ω–µ –æ—Ç–º–µ—Ç–∏–ª–∏ —Å—Ç–∞—Ç—É—Å.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤ Telegram:\n"
            f"/contact_{session.id} ‚Äî —Å–≤—è–∑–∞–ª—Å—è\n"
            f"/complete_{session.id} ‚Äî —Å–µ—Å—Å–∏—è –ø—Ä–æ—à–ª–∞"
        )

async def my_requests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.effective_chat.id
    psychologist = await get_psychologist_profile(telegram_id)
    active = PsychologistSessionRequest.objects.filter(psychologist=psychologist, status="PENDING")
    if not active.exists():
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
        return
    text = "üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n"
    for req in active:
        text += f"ID: {req.id}, –ö–ª–∏–µ–Ω—Ç: {req.client_name}, –¢–µ–º–∞: {req.topic}\n"
    await update.message.reply_text(text)

async def status_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message.text.strip()
    try:
        req_id = int(message.split("_", 1)[1])
        request = PsychologistSessionRequest.objects.get(id=req_id)
        status_text = f"üìÑ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{request.id}: {request.status}\n–ö–ª–∏–µ–Ω—Ç: {request.client_name}\n–¢–µ–º–∞: {request.topic}"
        await update.message.reply_text(status_text)
    except Exception:
        await update.message.reply_text("‚ùó–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏.")

async def remind_clients_about_reviews():
    completed = PsychologistSessionRequest.objects.filter(status="COMPLETED", review_submitted=False)
    for session in completed:
        if session.telegram_id:
            try:
                await send_telegram_message(
                    session.telegram_id,
                    f"üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ —Å–µ—Å—Å–∏–∏ —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º {session.psychologist.user.get_full_name()}"
                )
                session.review_requested = True
                session.save(update_fields=["review_requested"])
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É: {e}")

async def main() -> None:
    application = ApplicationBuilder().token(settings.TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", link_telegram_user))

    application.add_handler(MessageHandler(filters.Regex("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"), leave_review))
    application.add_handler(MessageHandler(filters.Regex("^/accept_\\d+$"), accept_request))

    application.add_handler(CommandHandler("my_requests", my_requests))
    application.add_handler(CommandHandler("status", status_request))
    application.add_handler(MessageHandler(filters.Regex("^/status_\\d+$"), status_request))

    application.add_handler(CallbackQueryHandler(handle_accept_callback))
    application.add_handler(CallbackQueryHandler(handle_status_update_callback))

    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, process_review))
    await application.run_polling()

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())