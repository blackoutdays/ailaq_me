from django.db.models.signals import post_save
from django.dispatch import receiver
from .models import (
    CustomUser, PsychologistApplication, PsychologistProfile,
    PsychologistSessionRequest, QuickClientConsultationRequest
)
from .telegram_bot import send_telegram_message
import logging
from asgiref.sync import async_to_sync

logger = logging.getLogger(__name__)

@receiver(post_save, sender=QuickClientConsultationRequest)
def update_consultation_count(sender, instance, **kwargs):
    if instance.status == 'COMPLETED' and instance.taken_by:
        instance.taken_by.update_requests_count()

@receiver(post_save, sender=PsychologistSessionRequest)
def update_session_count(sender, instance, **kwargs):
    if instance.status == 'COMPLETED' and instance.psychologist:
        instance.psychologist.update_requests_count()

@receiver(post_save, sender=CustomUser)
def handle_custom_user_post_save(sender, instance, created, **kwargs):
    """ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë—Ç –∑–∞—è–≤–∫—É –∏ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∏–º –±—ã—Ç—å """
    if created and instance.wants_to_be_psychologist:
        PsychologistApplication.objects.get_or_create(user=instance)
        PsychologistProfile.objects.get_or_create(user=instance)
        logger.info(f"üß† –°–æ–∑–¥–∞–Ω—ã –∑–∞—è–≤–∫–∞ –∏ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞ {instance.id}")

@receiver(post_save, sender=PsychologistApplication)
def handle_application_status_change(sender, instance, **kwargs):
    """ –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ—Ñ–∏–ª—è, –∫–æ–≥–¥–∞ –∑–∞—è–≤–∫–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ """
    user = instance.user
    profile, _ = PsychologistProfile.objects.get_or_create(user=user)
    telegram_id = user.telegram_id

    if not telegram_id:
        logger.warning(f"üö´ –ù–µ—Ç Telegram ID –¥–ª—è user_id={user.id}, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")
        return

    if instance.status == 'APPROVED':
        user.is_psychologist = True
        user.save(update_fields=["is_psychologist"])

        profile.is_verified = True
        profile.save(update_fields=["is_verified"])

        message = (
            "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–ª—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –±—ã—Ç—å –≤–∏–¥–∏–º—ã–º –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ 3 –∑–∞—è–≤–æ–∫ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤."
        )
        logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –æ–¥–æ–±—Ä–µ–Ω–∞: user_id={user.id}")
    elif instance.status == 'REJECTED':
        user.is_psychologist = False
        user.save(update_fields=["is_psychologist"])

        profile.is_verified = False
        profile.save(update_fields=["is_verified"])

        message = (
            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–ª—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n"
            "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É ‚Äî —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
        )
        logger.info(f"‚ùå –ó–∞—è–≤–∫–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: user_id={user.id}")
    else:
        return

    try:
        async_to_sync(send_telegram_message)(
            telegram_id=telegram_id,
            text=message
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram-—Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@receiver(post_save, sender=CustomUser)
def create_application_and_profile_for_candidate(sender, instance, created, **kwargs):
    if instance.wants_to_be_psychologist:
        from ailaq.models import PsychologistApplication, PsychologistProfile
        app, _ = PsychologistApplication.objects.get_or_create(user=instance)
        PsychologistProfile.objects.get_or_create(user=instance, application=app)