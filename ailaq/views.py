#views
import time
import hmac
from asgiref.sync import async_to_sync
from django.http.multipartparser import MultiPartParser
from django.utils.timezone import now
from django.contrib.auth.password_validation import validate_password
from django.core.exceptions import ValidationError
from django.shortcuts import get_object_or_404
from django.http import JsonResponse
from hashlib import sha256
from rest_framework import status, viewsets
from rest_framework.generics import GenericAPIView, ListCreateAPIView, RetrieveUpdateDestroyAPIView
from rest_framework.permissions import IsAuthenticated, IsAdminUser, AllowAny
from rest_framework.views import APIView
from rest_framework_simplejwt.tokens import RefreshToken
from rest_framework.response import Response
from drf_spectacular.utils import extend_schema, OpenApiResponse, OpenApiParameter
from config import settings
from .models import PsychologistProfile, PsychologistApplication, ClientProfile, CustomUser, \
    PsychologistFAQ, Review, Session, QuickClientConsultationRequest, Topic
from .serializers import (
    CustomUserCreationSerializer,
    LoginSerializer, PsychologistApplicationSerializer, ClientProfileSerializer, ReviewSerializer, CatalogSerializer,
    PersonalInfoSerializer, QualificationSerializer, DocumentSerializer,
    FAQListSerializer, TopicSerializer, QuickClientConsultationRequestSerializer, TelegramAuthSerializer,
    ServicePriceSerializer, EmptySerializer
)
from django_filters.rest_framework import DjangoFilterBackend
from rest_framework.filters import OrderingFilter
from rest_framework.viewsets import ReadOnlyModelViewSet
from rest_framework.pagination import PageNumberPagination
from django.views.decorators.csrf import csrf_exempt
from rest_framework.parsers import MultiPartParser, FormParser
from django.utils.decorators import method_decorator
import telegram
import logging
logger = logging.getLogger(__name__)

bot = telegram.Bot(token=settings.TELEGRAM_BOT_TOKEN)

class RegisterUserView(APIView):
    permission_classes = [AllowAny]

    @extend_schema(
        request=CustomUserCreationSerializer,
        responses={201: OpenApiResponse(description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")},
    )
    def post(self, request):
        serializer = CustomUserCreationSerializer(data=request.data)

        if serializer.is_valid():
            password = serializer.validated_data["password"]
            password_confirm = serializer.validated_data["password_confirm"]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π
            if password != password_confirm:
                return Response({"password_confirm": "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç."}, status=status.HTTP_400_BAD_REQUEST)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è
            try:
                validate_password(password)
            except ValidationError as e:
                return Response({"password": list(e.messages)}, status=status.HTTP_400_BAD_REQUEST)

            user = serializer.save()
            if user.wants_to_be_psychologist:
                PsychologistApplication.objects.get_or_create(user=user)

            refresh = RefreshToken.for_user(user)
            return Response(
                {
                    "access_token": str(refresh.access_token),
                    "refresh_token": str(refresh),
                    "role": "–ø—Å–∏—Ö–æ–ª–æ–≥" if user.is_psychologist else "–∫–ª–∏–µ–Ω—Ç"
                },
                status=status.HTTP_201_CREATED,
            )

        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

# üîπ **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å —Ä—É—Å—Å–∫–∏–º–∏ –æ—à–∏–±–∫–∞–º–∏**
class LoginView(APIView):
    permission_classes = [AllowAny]

    @extend_schema(
        request=LoginSerializer,
        responses={200: OpenApiResponse(description="–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É.")},
    )
    def post(self, request):
        serializer = LoginSerializer(data=request.data)

        if serializer.is_valid():
            email = serializer.validated_data["email"]
            password = serializer.validated_data["password"]
            user = CustomUser.objects.filter(email=email).first()

            if not user:
                return Response({"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω."}, status=status.HTTP_400_BAD_REQUEST)

            if not user.check_password(password):
                return Response({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å."}, status=status.HTTP_400_BAD_REQUEST)

            refresh = RefreshToken.for_user(user)
            return Response(
                {
                    "access_token": str(refresh.access_token),
                    "refresh_token": str(refresh),
                    "role": "–ø—Å–∏—Ö–æ–ª–æ–≥" if user.is_psychologist else "–∫–ª–∏–µ–Ω—Ç"
                },
                status=status.HTTP_200_OK,
            )

        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

class QuickClientConsultationAPIView(APIView):

    @extend_schema(
        request=QuickClientConsultationRequestSerializer,
        responses={201: QuickClientConsultationRequestSerializer},
        description="–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –±—ã—Å—Ç—Ä—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–∂–µ—Ç Telegram."
    )
    def post(self, request):
        serializer = QuickClientConsultationRequestSerializer(data=request.data)
        if serializer.is_valid():
            consultation_request = serializer.save()

            # üîπ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            bot_info = async_to_sync(self.get_bot_info)()
            redirect_url = f"https://t.me/{bot_info.username}?start=quick_{consultation_request.verification_code}"

            # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ telegram_id, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if consultation_request.telegram_id:
                async_to_sync(self.send_telegram_message)(consultation_request.telegram_id, consultation_request.pk)

            return JsonResponse(
                {
                    "message": "–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞",
                    "redirect_url": redirect_url,
                    "verification_code": consultation_request.verification_code
                },
                status=status.HTTP_201_CREATED
            )

        return JsonResponse(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    # üîπ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –±–æ—Ç–∞ (—Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º –º–µ—Ç–æ–¥–æ–º, —Ç–∞–∫ –∫–∞–∫ –≤–Ω—É—Ç—Ä–∏ APIView)
    @staticmethod
    async def get_bot_info():
        return await bot.get_me()

    @staticmethod
    async def send_telegram_message(chat_id, consultation_id):
        await bot.send_message(
            chat_id=chat_id,
            text=f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. ID –∑–∞—è–≤–∫–∏: {consultation_id}"
        )

# –°–ø–∏—Å–æ–∫ –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∫–∞—Ç–∞–ª–æ–≥
class CatalogPagination(PageNumberPagination):
    page_size = 10
    page_size_query_param = 'page_size'
    max_page_size = 100

class CatalogViewSet(ReadOnlyModelViewSet):
    """–ö–∞—Ç–∞–ª–æ–≥ –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π """
    queryset = PsychologistProfile.objects.filter(is_in_catalog=True).select_related('application')
    serializer_class = CatalogSerializer
    pagination_class = CatalogPagination
    permission_classes = [AllowAny]

    filter_backends = [DjangoFilterBackend, OrderingFilter]
    filterset_fields = {
        'is_verified': ['exact'],
        'is_in_catalog': ['exact'],
        'requests_count': ['gte', 'lte'],
    }
    ordering_fields = ['application__id', 'requests_count']
    ordering = ['application__id']

    @extend_schema(
        description="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.",
        parameters=[
            OpenApiParameter("is_verified", description="–§–∏–ª—å—Ç—Ä –ø–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ (true/false)", required=False, type=bool),
            OpenApiParameter("is_in_catalog", description="–§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–ª–∏—á–∏—é –≤ –∫–∞—Ç–∞–ª–æ–≥–µ (true/false)", required=False, type=bool),
            OpenApiParameter("requests_count__gte", description="–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤", required=False, type=int),
            OpenApiParameter("requests_count__lte", description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤", required=False, type=int),
            OpenApiParameter("ordering", description="–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (application__id, requests_count)", required=False, type=str),
            OpenApiParameter("page", description="–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã", required=False, type=int),
            OpenApiParameter("page_size", description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)", required=False, type=int),
        ],
    )
    def list(self, request, *args, **kwargs):
        return super().list(request, *args, **kwargs)

class ClientProfileViewSet(viewsets.ModelViewSet):
    queryset = ClientProfile.objects.all()
    serializer_class = ClientProfileSerializer
    permission_classes = [IsAuthenticated]
    parser_classes = (MultiPartParser, FormParser)  # –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ

    def get_queryset(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        return ClientProfile.objects.filter(user=self.request.user)

    @extend_schema(
        description="–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.",
        responses={200: ClientProfileSerializer},
    )
    def list(self, request, *args, **kwargs):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞."""
        try:
            profile = ClientProfile.objects.get(user=request.user)
            serializer = self.get_serializer(profile)
            return Response(serializer.data, status=status.HTTP_200_OK)
        except ClientProfile.DoesNotExist:
            return Response({"detail": "–ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω."}, status=status.HTTP_404_NOT_FOUND)

    @extend_schema(
        description="–°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞.",
        request=ClientProfileSerializer,
        responses={200: ClientProfileSerializer},
    )
    def create(self, request, *args, **kwargs):
        """–°–æ–∑–¥–∞—ë—Ç –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç, –µ—Å–ª–∏ –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
        profile, created = ClientProfile.objects.get_or_create(user=request.user)
        serializer = self.get_serializer(profile, data=request.data, partial=True)
        if serializer.is_valid():
            serializer.save(user=request.user)
            status_code = status.HTTP_201_CREATED if created else status.HTTP_200_OK
            return Response(serializer.data, status=status_code)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    @extend_schema(
        description="–ß–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞.",
        request=ClientProfileSerializer,
        responses={200: ClientProfileSerializer},
    )
    def partial_update(self, request, *args, **kwargs):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞."""
        try:
            profile = ClientProfile.objects.get(user=request.user)
            serializer = self.get_serializer(profile, data=request.data, partial=True)
            if serializer.is_valid():
                serializer.save()
                return Response(serializer.data, status=status.HTTP_200_OK)
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
        except ClientProfile.DoesNotExist:
            return Response({"detail": "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."}, status=status.HTTP_404_NOT_FOUND)

    @extend_schema(
        description="–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞.",
        responses={204: None},
    )
    def destroy(self, request, *args, **kwargs):
        """–£–¥–∞–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞."""
        try:
            profile = ClientProfile.objects.get(user=request.user)
            profile.delete()
            return Response(status=status.HTTP_204_NO_CONTENT)
        except ClientProfile.DoesNotExist:
            return Response({"detail": "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."}, status=status.HTTP_404_NOT_FOUND)

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞
class PsychologistProfileView(APIView):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤–µ—Å—å –ø—Ä–æ—Ñ–∏–ª—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞, –≤–∫–ª—é—á–∞—è –æ—Ç–∑—ã–≤—ã.
    """
    permission_classes = [IsAuthenticated]

    @extend_schema(
        summary="–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∑–∞—è–≤–∫–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞",
        description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞, –≤–∫–ª—é—á–∞—è –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é, —É—Å–ª—É–≥–∏, FAQ –∏ –æ—Ç–∑—ã–≤—ã.",
        responses={200: OpenApiResponse(description="–ü–æ–ª–Ω–∞—è –∑–∞—è–≤–∫–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∞")}
    )
    def get(self, request):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –ø—Å–∏—Ö–æ–ª–æ–≥–∞
            application = PsychologistApplication.objects.filter(user=request.user).first()

            if not application:
                logger.error(f"–ó–∞—è–≤–∫–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request.user.id}")
                return Response({"error": "–ó–∞—è–≤–∫–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."}, status=status.HTTP_404_NOT_FOUND)

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã (–µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∑–∞—è–≤–∫–µ)
            reviews = Review.objects.filter(psychologist__application=application).order_by("-created_at")
            reviews_serializer = ReviewSerializer(reviews, many=True)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            data = {
                "personal_info": PersonalInfoSerializer(application).data,
                "qualification": QualificationSerializer(application).data,
                "service_price": ServicePriceSerializer(application).data,
                "faq": FAQListSerializer(application.faqs.all(), many=True).data,
                "reviews": reviews_serializer.data,
            }

            return Response(data, status=status.HTTP_200_OK)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞: {str(e)}")
            return Response({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞."},
                            status=status.HTTP_500_INTERNAL_SERVER_ERROR)
# üîπ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (POST)
class PersonalInfoView(APIView):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∑–∞—è–≤–∫–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∞.
    """
    permission_classes = [IsAuthenticated]

    @extend_schema(
        request=PersonalInfoSerializer,
        responses={200: PersonalInfoSerializer}
    )
    def post(self, request):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞—è–≤–∫–∞
            application, created = PsychologistApplication.objects.get_or_create(user=request.user)

            if created:
                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request.user.id}")
            else:
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request.user.id}")

            # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
            serializer = PersonalInfoSerializer(application, data=request.data, partial=True)

            if serializer.is_valid():
                serializer.save()
                return Response(serializer.data, status=status.HTTP_200_OK)

            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}")
            return Response({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."},
                            status=status.HTTP_500_INTERNAL_SERVER_ERROR)

# üîπ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ (POST)
class QualificationView(APIView):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞.
    """
    permission_classes = [IsAuthenticated]

    @extend_schema(
        request=QualificationSerializer,
        responses={200: QualificationSerializer}
    )
    def post(self, request):
        try:
            application = get_object_or_404(PsychologistApplication, user=request.user)
            serializer = QualificationSerializer(application, data=request.data, partial=True)

            if serializer.is_valid():
                serializer.save()
                return Response(serializer.data, status=status.HTTP_200_OK)

            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}")
            return Response({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

# üîπ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥ (POST)
class ServicePriceView(APIView):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥ –ø—Å–∏—Ö–æ–ª–æ–≥–∞.
    """
    permission_classes = [IsAuthenticated]

    @extend_schema(
        request=ServicePriceSerializer,
        responses={200: ServicePriceSerializer}
    )
    def post(self, request):
        try:
            application = get_object_or_404(PsychologistApplication, user=request.user)
            serializer = ServicePriceSerializer(application, data=request.data, partial=True)

            if serializer.is_valid():
                serializer.save()
                return Response(serializer.data, status=status.HTTP_200_OK)

            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥: {str(e)}")
            return Response({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

# üîπ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ FAQ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ (POST)
class FAQView(APIView):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ FAQ –ø—Å–∏—Ö–æ–ª–æ–≥–∞.
    """
    permission_classes = [IsAuthenticated]

    @extend_schema(
        operation_id="get_faqs",
        description="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ FAQ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
        responses={200: FAQListSerializer, 404: {"description": "FAQ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."}},
    )
    def get(self, request):
        try:
            application = get_object_or_404(PsychologistApplication, user=request.user)
            faqs = application.faqs.all()
            serializer = FAQListSerializer(faqs, many=True)
            return Response(serializer.data, status=status.HTTP_200_OK)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ FAQ: {str(e)}")
            return Response({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å FAQ."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    @extend_schema(
        operation_id="update_faq",
        description="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ FAQ (–∑–∞–º–µ–Ω—è–µ—Ç –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã).",
        request=FAQListSerializer,
        responses={200: {"description": "FAQ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ."}, 400: {"description": "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏."}},
    )
    def post(self, request):
        try:
            application = get_object_or_404(PsychologistApplication, user=request.user)

            serializer = FAQListSerializer(data=request.data)
            if serializer.is_valid():
                application.faqs.all().delete()

                faqs_data = serializer.validated_data.get("faqs", [])
                new_faqs = [PsychologistFAQ(application=application, **faq) for faq in faqs_data]

                PsychologistFAQ.objects.bulk_create(new_faqs)

                return Response({"message": "FAQ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ."}, status=status.HTTP_200_OK)

            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ FAQ: {str(e)}")
            return Response({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å FAQ."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

# üîπ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
class DocumentView(APIView):
    permission_classes = [IsAuthenticated]

    @extend_schema(
        request=DocumentSerializer,
        responses={200: DocumentSerializer}
    )
    def patch(self, request):
        try:
            application = get_object_or_404(PsychologistApplication, user=request.user)

            if not request.FILES:
                return Response({"error": "–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Ñ–∞–π–ª—ã."}, status=status.HTTP_400_BAD_REQUEST)

            serializer = DocumentSerializer(application, data=request.data, partial=True)

            if serializer.is_valid():
                serializer.save()
                return Response({"message": "–î–æ–∫—É–º–µ–Ω—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ."}, status=status.HTTP_200_OK)

            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

        except PsychologistApplication.DoesNotExist:
            return Response({"error": "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."}, status=status.HTTP_404_NOT_FOUND)

class ReviewListView(APIView):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –æ –ø—Å–∏—Ö–æ–ª–æ–≥–µ.
    """
    permission_classes = [AllowAny]

    @extend_schema(
        summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤ –æ –ø—Å–∏—Ö–æ–ª–æ–≥–µ",
        description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –æ—Ç–∑—ã–≤—ã, –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞.",
        parameters=[
            OpenApiParameter(name="psychologist_id", description="ID –ø—Å–∏—Ö–æ–ª–æ–≥–∞", required=True, type=int),
            OpenApiParameter(name="page", description="–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–∞–≥–∏–Ω–∞—Ü–∏—è)", required=False, type=int),
            OpenApiParameter(name="page_size", description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ", required=False, type=int),
        ],
        responses={200: ReviewSerializer(many=True)}
    )
    def get(self, request):
        psychologist_id = request.query_params.get("psychologist_id")

        if not psychologist_id:
            return Response({"error": "–ù–µ —É–∫–∞–∑–∞–Ω ID –ø—Å–∏—Ö–æ–ª–æ–≥–∞."}, status=status.HTTP_400_BAD_REQUEST)

        psychologist = get_object_or_404(PsychologistProfile, id=psychologist_id)
        reviews = Review.objects.filter(psychologist=psychologist).order_by("-created_at")

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        paginator = PageNumberPagination()
        paginated_reviews = paginator.paginate_queryset(reviews, request)
        serializer = ReviewSerializer(paginated_reviews, many=True)

        return paginator.get_paginated_response(serializer.data)

class ReviewCreateView(APIView):
    """
    –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –ø—Å–∏—Ö–æ–ª–æ–≥–µ. –ö–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
    """
    permission_classes = [IsAuthenticated]

    @extend_schema(
        summary="–°–æ–∑–¥–∞—Ç—å –æ—Ç–∑—ã–≤",
        description="–ö–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –ø—Å–∏—Ö–æ–ª–æ–≥–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.",
        request=ReviewSerializer,
        responses={201: ReviewSerializer, 400: OpenApiResponse(description="–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")},
    )
    def post(self, request):
        client = request.user.clientprofile
        psychologist_id = request.data.get("psychologist_id")
        rating = request.data.get("rating")
        text = request.data.get("text", "")

        if not psychologist_id:
            return Response({"error": "–ù–µ —É–∫–∞–∑–∞–Ω ID –ø—Å–∏—Ö–æ–ª–æ–≥–∞."}, status=status.HTTP_400_BAD_REQUEST)

        if rating is None or not (1 <= rating <= 5):
            return Response({"error": "–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5."}, status=status.HTTP_400_BAD_REQUEST)

        try:
            completed_session = Session.objects.filter(
                client=client, psychologist_id=psychologist_id, status="COMPLETED"
            ).latest("end_time")
        except Session.DoesNotExist:
            return Response({"error": "–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."}, status=status.HTTP_400_BAD_REQUEST)

        if Review.objects.filter(session=completed_session).exists():
            return Response({"error": "–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤ –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏."}, status=status.HTTP_400_BAD_REQUEST)

        review = Review.objects.create(
            session=completed_session, client=client, psychologist_id=psychologist_id, rating=rating, text=text
        )

        return Response(ReviewSerializer(review).data, status=status.HTTP_201_CREATED)

#TELEGRAM LOGIC
class LinkTelegramView(GenericAPIView):
    serializer_class = TelegramAuthSerializer

    def post(self, request):
        try:
            verification_code = request.data.get("verification_code")
            telegram_id = request.data.get("telegram_id")

            if not verification_code or not telegram_id:
                return Response({"error": "Verification code and Telegram ID are required."}, status=400)

            # üîπ –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–æ–¥ –≤ CustomUser
            user = CustomUser.objects.filter(verification_code=verification_code).first()
            if user:
                if user.verification_code_expiration and now() > user.verification_code_expiration:
                    return Response({"error": "Verification code has expired."}, status=400)

                user.telegram_id = telegram_id
                user.verification_code = None
                user.verification_code_expiration = None
                user.save()

                return Response({"message": "Telegram ID linked successfully (User)."}, status=200)

            # üîπ –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–æ–¥ –≤ QuickClientConsultationRequest
            consultation_request = QuickClientConsultationRequest.objects.filter(
                verification_code=verification_code
            ).first()
            if consultation_request:
                consultation_request.telegram_id = telegram_id
                consultation_request.save()

                return Response({"message": "Telegram ID linked successfully (Consultation Request)."}, status=200)

            return Response({"error": "Invalid verification code."}, status=400)

        except Exception as e:
            logger.error(f"Error linking Telegram: {str(e)}")
            return Response({"error": "Internal server error."}, status=500)

class TelegramAuthView(GenericAPIView):
    serializer_class = TelegramAuthSerializer

    @staticmethod
    def validate_telegram_auth(auth_data: dict, bot_token: str) -> bool:
        check_string = "\n".join([f"{k}={v}" for k, v in sorted(auth_data.items()) if k != "hash"])
        secret_key = sha256(bot_token.encode()).digest()
        expected_hash = hmac.new(secret_key, check_string.encode(), sha256).hexdigest()
        return expected_hash == auth_data.get("hash") and time.time() - int(auth_data["auth_date"]) < 86400

    def post(self, request, *args, **kwargs):
        try:
            auth_data = request.data
            bot_token = settings.TELEGRAM_BOT_TOKEN

            if not self.validate_telegram_auth(auth_data, bot_token):
                return Response({"error": "Invalid Telegram authentication"}, status=400)

            telegram_id = auth_data["id"]
            username = auth_data.get("username", "")
            first_name = auth_data.get("first_name", "")
            role = request.data.get("role", "client")

            user, created = CustomUser.objects.get_or_create(
                telegram_id=telegram_id,
                defaults={
                    "username": username,
                    "first_name": first_name,
                    "is_psychologist": role == "psychologist",
                }
            )

            if not created:
                user.username = username
                user.first_name = first_name
                if role == "psychologist" and not user.is_psychologist:
                    user.is_psychologist = True
                user.save()

            if created:
                if user.is_psychologist:
                    PsychologistProfile.objects.create(user=user)
                else:
                    ClientProfile.objects.create(user=user)

            refresh = RefreshToken.for_user(user)
            return Response({
                "message": "Authenticated successfully",
                "access_token": str(refresh.access_token),
                "refresh_token": str(refresh),
                "is_psychologist": user.is_psychologist,
            })

        except Exception as e:
            logger.error(f"Telegram auth failed: {str(e)}")
            return Response({"error": "Internal server error."}, status=500)

class VerificationCodeView(GenericAPIView):
    permission_classes = [IsAuthenticated]

    @extend_schema(
        summary="Get Current Verification Code",
        description="–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
        responses={
            200: OpenApiResponse(description="Verification code retrieved successfully."),
            404: OpenApiResponse(description="Verification code is not available or has expired."),
        },
    )
    def get(self, request):
        user = request.user
        if user.verification_code and (not user.verification_code_expiration or now() <= user.verification_code_expiration):
            return Response({
                "verification_code": user.verification_code,
                "message": "This is your current verification code.",
                "expires_at": user.verification_code_expiration
            }, status=200)
        else:
            return Response({
                "message": "Verification code is not available or has expired. Request a new code if needed."
            }, status=404)

class NewVerificationCodeView(GenericAPIView):
    permission_classes = [IsAuthenticated]
    serializer_class = EmptySerializer

    @extend_schema(
        summary="Request New Verification Code",
        description="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
        responses={
            200: OpenApiResponse(
                description="A new verification code has been generated successfully.",
                examples=[
                    {
                        "new_verification_code": "1234",
                        "message": "A new verification code has been generated successfully.",
                        "expires_at": "2025-02-02T12:00:00Z"
                    }
                ],
            ),
            500: OpenApiResponse(description="Internal server error."),
        },
    )
    def post(self, request):
        try:
            user = request.user
            new_code = user.generate_new_verification_code()
            return Response({
                "new_verification_code": new_code,
                "message": "A new verification code has been generated successfully.",
                "expires_at": user.verification_code_expiration
            }, status=status.HTTP_200_OK)
        except Exception as e:
            return Response({"error": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

class AdminApprovePsychologistView(GenericAPIView):
    queryset = PsychologistApplication.objects.all()
    serializer_class = PsychologistApplicationSerializer
    permission_classes = [IsAdminUser]

    @extend_schema(
        responses={
            200: PsychologistApplicationSerializer(many=True),
        },
    )
    def get(self, request):
        applications = PsychologistApplication.objects.all()
        serializer = PsychologistApplicationSerializer(applications, many=True)
        return Response(serializer.data, status=status.HTTP_200_OK)

    @extend_schema(
        parameters=[
            OpenApiParameter("application_id", description="Application ID", required=True, type=int),
        ],
        responses={
            200: OpenApiResponse(description="Psychologist approved successfully."),
            400: OpenApiResponse(description="Invalid action."),
            404: OpenApiResponse(description="Application not found."),
        },
    )
    def post(self, request, application_id):
        try:
            application = PsychologistApplication.objects.get(id=application_id)

            if application.status != "PENDING":
                return Response(
                    {"error": "Application has already been reviewed."},
                    status=status.HTTP_400_BAD_REQUEST,
                )

            action = request.data.get("action")

            if action == "APPROVE":
                application.status = "APPROVED"
                application.save()

                user = application.user
                user.is_psychologist = True
                user.save()

                profile, _ = PsychologistProfile.objects.get_or_create(user=user)
                profile.is_verified = True
                profile.save()

                return Response(
                    {"message": "Psychologist approved successfully."},
                    status=status.HTTP_200_OK,
                )
            elif action == "REJECT":
                application.status = "REJECTED"
                application.save()
                return Response(
                    {"message": "Psychologist application rejected."},
                    status=status.HTTP_200_OK,
                )
            else:
                return Response(
                    {"error": "Invalid action."}, status=status.HTTP_400_BAD_REQUEST
                )

        except PsychologistApplication.DoesNotExist:
            return Response(
                {"error": "Application not found."}, status=status.HTTP_404_NOT_FOUND
            )

class TopicListView(APIView):
    def get(self, request):
        topics = Topic.objects.all()
        serializer = TopicSerializer(topics, many=True)
        return Response(serializer.data, status=status.HTTP_200_OK)
