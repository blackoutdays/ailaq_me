import hmac
import uuid
from hashlib import sha256
from django.utils.decorators import method_decorator
from django.views import View
from django.contrib.auth import get_user_model
from django.views.decorators.csrf import csrf_exempt
from rest_framework.exceptions import NotFound, ValidationError, PermissionDenied
from rest_framework.serializers import Serializer, EmailField
from django.utils.crypto import get_random_string
from datetime import timedelta
from .serializers import RegisterSerializer, ChangePasswordSerializer, TelegramAuthSerializer, \
    AuthenticatedQuickClientConsultationRequestSerializer, \
    QuickClientConsultationRequestSerializer, QuickClientConsultationAnonymousSerializer, SessionItemSerializer
from datetime import datetime
from django.utils.timezone import now, make_aware
from django.shortcuts import get_object_or_404, render
from rest_framework import status, viewsets
from ailaq.tasks import send_email_async
from rest_framework.generics import GenericAPIView
from rest_framework.permissions import IsAuthenticated, IsAdminUser, AllowAny
from rest_framework.views import APIView
from rest_framework_simplejwt.tokens import RefreshToken
from rest_framework.response import Response
from drf_spectacular.utils import extend_schema, OpenApiResponse, OpenApiParameter, OpenApiTypes
from config import settings
from .emails import send_rejection_email, send_approval_email
from .models import PsychologistProfile, PsychologistApplication, ClientProfile, CustomUser, \
    PsychologistFAQ, Review, Session, QuickClientConsultationRequest, Topic, EducationDocument
from .serializers import (
    LoginSerializer, PsychologistApplicationSerializer, ClientProfileSerializer, ReviewSerializer, CatalogSerializer,
    PersonalInfoSerializer, QualificationSerializer, DocumentSerializer,
    FAQListSerializer, TopicSerializer,
    ServicePriceSerializer, SessionCreateSerializer, SessionSerializer, PsychologistProfileSerializer
)
from django_filters.rest_framework import DjangoFilterBackend
from rest_framework.filters import OrderingFilter
from rest_framework.viewsets import ReadOnlyModelViewSet
from rest_framework.pagination import PageNumberPagination
from rest_framework.parsers import MultiPartParser, FormParser
import telegram
import logging

logger = logging.getLogger(__name__)
logger = logging.getLogger("telegram_auth")
User = get_user_model()
bot = telegram.Bot(token=settings.TELEGRAM_BOT_TOKEN)

class RegisterUserView(APIView):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
    - –ö–ª–∏–µ–Ω—Ç—ã: email –∏–ª–∏ Telegram.
    - –ü—Å–∏—Ö–æ–ª–æ–≥–∏: —Ç–æ–ª—å–∫–æ email + —Å–æ–∑–¥–∞—ë—Ç—Å—è –∑–∞—è–≤–∫–∞.
    """

    @extend_schema(
        tags=["–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"],
        summary="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–∫–ª–∏–µ–Ω—Ç –∏–ª–∏ –ø—Å–∏—Ö–æ–ª–æ–≥)",
        description="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ email (–ø—Å–∏—Ö–æ–ª–æ–≥) –∏–ª–∏ email/Telegram (–∫–ª–∏–µ–Ω—Ç).",
        request=RegisterSerializer,
        responses={
            201: OpenApiResponse(description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω."),
            400: OpenApiResponse(description="–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏."),
        },
    )
    def post(self, request):
        serializer = RegisterSerializer(data=request.data)
        if serializer.is_valid():
            user = serializer.save()

            if user.wants_to_be_psychologist:
                # üîπ –ï—Å–ª–∏ —Ö–æ—á–µ—Ç –±—ã—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º ‚Üí —Å–æ–∑–¥–∞—ë–º —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫—É
                PsychologistApplication.objects.get_or_create(user=user, defaults={"status": "PENDING"})
            else:
                # üîπ –ï—Å–ª–∏ –æ–±—ã—á–Ω—ã–π –∫–ª–∏–µ–Ω—Ç ‚Üí —Å–æ–∑–¥–∞—ë–º –ø—Ä–æ—Ñ–∏–ª—å —Å—Ä–∞–∑—É
                ClientProfile.objects.create(user=user)

            # üîπ –ï—Å–ª–∏ —á–µ—Ä–µ–∑ email ‚Üí —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            if user.email:
                verification_code = get_random_string(length=32)
                user.verification_code = verification_code
                user.verification_code_expiration = now() + timedelta(hours=24)
                user.save()

                confirmation_link = f"{settings.FRONTEND_URL}/api/confirm-email/{verification_code}"
                subject = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ email"
                message = f"–ü—Ä–æ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {confirmation_link}"

                send_email_async.delay(subject, message, [user.email])

                return Response(
                    {"message": "–ù–∞ –≤–∞—à email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."},
                    status=status.HTTP_201_CREATED
                )

            return Response(
                {"message": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."},
                status=status.HTTP_201_CREATED
            )

        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

class ConfirmEmailView(APIView):
    def get(self, request, verification_code):
        user = CustomUser.objects.filter(verification_code=verification_code).first()

        if not user or user.verification_code_expiration < now():
            if user:
                user.verification_code = None
                user.verification_code_expiration = None
                user.save()
            return Response(
                {"error": "–°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –µ–µ –¥–µ–π—Å—Ç–≤–∏—è."},
                status=status.HTTP_400_BAD_REQUEST
            )

        user.is_active = True
        user.verification_code = None
        user.verification_code_expiration = None
        user.save()

        return Response(
            {"message": "Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏."},
            status=status.HTTP_200_OK
        )

class ResendVerificationSerializer(Serializer):
    """ –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ email-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è """
    email = EmailField(required=True)

class ResendVerificationEmailView(APIView):
    """
    –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email.
    """

    @extend_schema(
        tags=["–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"],
        summary="–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ email-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
        description="–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email.",
        request=ResendVerificationSerializer,  # –î–æ–±–∞–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π request body
        responses={
            200: {"message": "–ù–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ."},
            400: {"error": "Email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–∞—è."},
            404: {"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."},
        },
    )
    def post(self, request):
        serializer = ResendVerificationSerializer(data=request.data)

        if not serializer.is_valid():
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

        email = serializer.validated_data["email"]

        user = CustomUser.objects.filter(email=email).first()

        if not user:
            return Response({"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."}, status=status.HTTP_404_NOT_FOUND)

        if user.is_active:
            return Response({"error": "Email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω."}, status=status.HTTP_400_BAD_REQUEST)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ –Ω–µ–¥–∞–≤–Ω–æ (–ª–∏–º–∏—Ç: 5 –º–∏–Ω—É—Ç)
        if user.verification_code_expiration and (now() - user.verification_code_expiration).seconds < 300:
            return Response({"error": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π."}, status=status.HTTP_400_BAD_REQUEST)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
        verification_code = get_random_string(length=32)
        user.verification_code = verification_code
        user.verification_code_expiration = now() + timedelta(hours=24)
        user.save()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ
        confirmation_link = f"{settings.FRONTEND_URL}/api/confirm-email/{verification_code}"
        subject = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ email"
        message = f"""
        –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! 
        –í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–∏—Å—å–º–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email. 
        –ü—Ä–æ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç: 

        {confirmation_link}

        –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.
        """

        send_email_async.delay(subject, message, [user.email])

        return Response({"message": "–ù–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ."}, status=status.HTTP_200_OK)

class LoginView(APIView):
    """
    –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É (–ø–æ email –∏ –ø–∞—Ä–æ–ª—é).
    """

    @extend_schema(
        tags=["–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"],
        summary="–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É",
        description="–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ email –∏ –ø–∞—Ä–æ–ª—é.",
        request=LoginSerializer,
        responses={
            200: OpenApiResponse(description="–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥."),
            400: OpenApiResponse(description="–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."),
        },
    )
    def post(self, request):
        serializer = LoginSerializer(data=request.data)
        if serializer.is_valid():
            user = serializer.validated_data["user"]
            refresh = RefreshToken.for_user(user)

            return Response({
                "message": "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ.",
                "access_token": str(refresh.access_token),
                "refresh_token": str(refresh),
                "telegram_linked": bool(user.telegram_id)
            }, status=status.HTTP_200_OK)

        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


@method_decorator(csrf_exempt, name='dispatch')
class TelegramAuthView(APIView):
    def get(self, request):
        print(f" –ü–†–ò–®–ï–õ –ó–ê–ü–†–û–° –û–¢ TELEGRAM: {request.query_params}")

        auth_data = request.query_params.dict()
        received_hash = auth_data.pop('hash', None)

        if not received_hash:
            return Response({"error": "–ù–µ—Ç hash"}, status=400)

        auth_data_str = "\n".join(f"{k}={v}" for k, v in sorted(auth_data.items()))
        secret_key = sha256(settings.TELEGRAM_BOT_TOKEN.encode()).digest()
        calculated_hash = hmac.new(secret_key, auth_data_str.encode(), sha256).hexdigest()

        if not hmac.compare_digest(calculated_hash, received_hash):
            return Response({"error": "–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å"}, status=400)

        telegram_id = int(auth_data['id'])
        first_name = auth_data.get('first_name', '')
        username = auth_data.get('username', f"user_{telegram_id}")

        email = f"{telegram_id}@telegram.local"

        user, created = User.objects.get_or_create(
            telegram_id=telegram_id,
            defaults={
                'username': username,
                'email': email,
                'is_active': True,
            }
        )

        if created:
            ClientProfile.objects.create(user=user, full_name=first_name)

        refresh = RefreshToken.for_user(user)

        return Response({
            'access_token': str(refresh.access_token),
            'refresh_token': str(refresh),
            'user_id': user.id,
            'message': "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞"
        })

class TelegramAuthPageView(View):
    def get(self, request):
        return render(request, 'telegram_auth.html')


class VerifyTelegramView(APIView):
    """
    –ü—Ä–∏–≤—è–∑–∫–∞ Telegram –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞.
    """

    @extend_schema(
        tags=["–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"],
        summary="–ü—Ä–∏–≤—è–∑–∫–∞ Telegram",
        description="–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏–≤—è–∑–∞—Ç—å Telegram –∫ –∞–∫–∫–∞—É–Ω—Ç—É –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ email.",
        request=None,
        responses={
            200: OpenApiResponse(description="Telegram –ø—Ä–∏–≤—è–∑–∞–Ω."),
            400: OpenApiResponse(description="–û—à–∏–±–∫–∞."),
        },
    )
    def post(self, request):
        auth_data = request.data
        telegram_id = auth_data["id"]
        user = request.user

        if user.telegram_id:
            return Response({"message": "Telegram —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω."}, status=status.HTTP_400_BAD_REQUEST)

        user.telegram_id = telegram_id
        user.save()
        return Response({"message": "Telegram –ø—Ä–∏–≤—è–∑–∞–Ω —É—Å–ø–µ—à–Ω–æ."}, status=status.HTTP_200_OK)

class QuickClientConsultationAPIView(APIView):
    permission_classes = [IsAuthenticated]

    @extend_schema(
        tags=["–ö–ª–∏–µ–Ω—Ç - –±—ã—Å—Ç—Ä–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"],
        summary="–ë—ã—Å—Ç—Ä–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤",
        request=AuthenticatedQuickClientConsultationRequestSerializer,
        responses={201: QuickClientConsultationRequestSerializer},
    )
    def post(self, request):
        user = request.user

        if not user.telegram_id:
            return Response({"error": "–ü—Ä–∏–≤—è–∂–∏—Ç–µ Telegram —á–µ—Ä–µ–∑ Web View –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é."}, status=400)

        if not hasattr(user, 'client_profile'):
            return Response({"error": "–ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω."}, status=400)

        profile = user.client_profile

        # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞–ø—Ä—è–º—É—é
        profile_data = {
            'client_name': profile.full_name,
            'age': profile.age,
            'gender': profile.gender,
        }

        serializer = AuthenticatedQuickClientConsultationRequestSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–∂–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
        consultation = QuickClientConsultationRequest.objects.create(
            **serializer.validated_data,
            **profile_data,
            telegram_id=user.telegram_id
        )

        response_serializer = QuickClientConsultationRequestSerializer(consultation)
        return Response({
            "message": "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.",
            "consultation_request": response_serializer.data
        }, status=201)

class QuickClientConsultationAnonymousAPIView(APIView):
    permission_classes = [AllowAny]

    @extend_schema(
        tags=["–ö–ª–∏–µ–Ω—Ç - –±—ã—Å—Ç—Ä–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"],
        summary="–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é (–±–µ–∑ Telegram, –±–µ–∑ –∞–∫–∫–∞—É–Ω—Ç–∞)",
        request=QuickClientConsultationAnonymousSerializer,
        responses={201: QuickClientConsultationAnonymousSerializer},
    )
    def post(self, request):
        serializer = QuickClientConsultationAnonymousSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        consultation = serializer.save()  # –ë–µ–∑ telegram_id

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, UUID)
        token = uuid.uuid4().hex
        consultation.client_token = token
        consultation.save()

        response_data = serializer.data
        response_data['client_token'] = token

        response = Response({
            "message": "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.",
            "consultation_request": response_data
        }, status=status.HTTP_201_CREATED)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ cookie (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        response.set_cookie("client_token", token, httponly=True, max_age=86400)

        return response

class TelegramAuthLinkConsultationAPIView(APIView):
    permission_classes = [AllowAny]

    @extend_schema(
        tags=["–ö–ª–∏–µ–Ω—Ç - Telegram –ø—Ä–∏–≤—è–∑–∫–∞"],
        summary="–ü—Ä–∏–≤—è–∑–∫–∞ Telegram –∫ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ",
        request=TelegramAuthSerializer,
        responses={200: OpenApiTypes.OBJECT}
    )
    def get(self, request):
        auth_data = request.query_params.dict()
        received_hash = auth_data.pop('hash', None)

        if not received_hash:
            return Response({"error": "–ù–µ—Ç hash"}, status=400)

        auth_data_str = "\n".join(f"{k}={v}" for k, v in sorted(auth_data.items()))
        secret_key = sha256(settings.TELEGRAM_BOT_TOKEN.encode()).digest()
        calculated_hash = hmac.new(secret_key, auth_data_str.encode(), sha256).hexdigest()

        if not hmac.compare_digest(calculated_hash, received_hash):
            return Response({"error": "–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å"}, status=400)

        telegram_id = int(auth_data['id'])

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ cookie
        client_token = request.COOKIES.get('client_token')

        if not client_token:
            return Response({"error": "–¢–æ–∫–µ–Ω –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω."}, status=400)

        try:
            consultation = QuickClientConsultationRequest.objects.get(client_token=client_token)
        except QuickClientConsultationRequest.DoesNotExist:
            return Response({"error": "–ó–∞—è–≤–∫–∞ —Å —Ç–∞–∫–∏–º —Ç–æ–∫–µ–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."}, status=404)

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user, created = CustomUser.objects.get_or_create(
            telegram_id=telegram_id,
            defaults={
                'email': f"{telegram_id}@telegram.local",
                'is_active': True,
                'username': auth_data.get('username', f"user_{telegram_id}"),
            }
        )

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Telegram –∫ –∑–∞—è–≤–∫–µ
        consultation.telegram_id = telegram_id
        consultation.save()

        return Response({
            'message': "Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∑–∞—è–≤–∫–µ.",
            'consultation_id': consultation.id
        })

# –°–ø–∏—Å–æ–∫ –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∫–∞—Ç–∞–ª–æ–≥
class CatalogPagination(PageNumberPagination):
    page_size = 10
    page_size_query_param = 'page_size'
    max_page_size = 100

class CatalogViewSet(ReadOnlyModelViewSet):
    """–ö–∞—Ç–∞–ª–æ–≥ –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π """
    queryset = PsychologistProfile.objects.filter(is_in_catalog=True).select_related('application')
    serializer_class = CatalogSerializer
    pagination_class = CatalogPagination
    permission_classes = [AllowAny]

    filter_backends = [DjangoFilterBackend, OrderingFilter]
    filterset_fields = {
        'is_verified': ['exact'],
        'is_in_catalog': ['exact'],
        'requests_count': ['gte', 'lte'],
    }
    ordering_fields = ['application__id', 'requests_count']
    ordering = ['application__id']

    @extend_schema(
        tags=["–ö–∞—Ç–∞–ª–æ–≥ –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤"],
        description="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.",
        parameters=[
            OpenApiParameter("is_verified", description="–§–∏–ª—å—Ç—Ä –ø–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ (true/false)", required=False, type=bool),
            OpenApiParameter("is_in_catalog", description="–§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–ª–∏—á–∏—é –≤ –∫–∞—Ç–∞–ª–æ–≥–µ (true/false)", required=False, type=bool),
            OpenApiParameter("requests_count__gte", description="–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤", required=False, type=int),
            OpenApiParameter("requests_count__lte", description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤", required=False, type=int),
            OpenApiParameter("ordering", description="–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (application__id, requests_count)", required=False, type=str),
            OpenApiParameter("page", description="–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã", required=False, type=int),
            OpenApiParameter("page_size", description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)", required=False, type=int),
        ],
    )
    def list(self, request, *args, **kwargs):
        return super().list(request, *args, **kwargs)

class ClientMeViewSet(viewsets.ViewSet):
    """
    ViewSet –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –±–µ–∑ –ø–µ—Ä–µ–¥–∞—á–∏ ID –≤ URL.
    """

    permission_classes = [IsAuthenticated]

    def get_object(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        """
        if self.request.user.is_psychologist or self.request.user.wants_to_be_psychologist:
            logger.warning(
                f"–ü—Å–∏—Ö–æ–ª–æ–≥ –∏–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.request.user.id}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞.")
            raise PermissionDenied("–ü—Å–∏—Ö–æ–ª–æ–≥–∏ –∏–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –≤ –ø—Å–∏—Ö–æ–ª–æ–≥–∏ –Ω–µ –º–æ–≥—É—Ç –∏–º–µ—Ç—å –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å.")

        try:
            return ClientProfile.objects.get(user=self.request.user)
        except ClientProfile.DoesNotExist:
            logger.warning(f"–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.request.user.id}")
            raise NotFound("–ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    @extend_schema(
        tags=["–ö–ª–∏–µ–Ω—Ç"],
        summary="–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞",
        responses={200: ClientProfileSerializer}
    )
    def retrieve(self, request):
        profile = self.get_object()
        serializer = ClientProfileSerializer(profile)
        return Response(serializer.data)

    @extend_schema(
        tags=["–ö–ª–∏–µ–Ω—Ç"],
        summary="–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞",
        responses={201: ClientProfileSerializer}
    )
    def create(self, request):
        if request.user.is_psychologist or request.user.wants_to_be_psychologist:
            logger.warning(f"–ü—Å–∏—Ö–æ–ª–æ–≥ –∏–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {request.user.id}) –ø–æ–ø—ã—Ç–∞–ª—Å—è —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞.")
            raise PermissionDenied("–ü—Å–∏—Ö–æ–ª–æ–≥–∏ –∏–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –≤ –ø—Å–∏—Ö–æ–ª–æ–≥–∏ –Ω–µ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏.")

        if ClientProfile.objects.filter(user=request.user).exists():
            logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request.user.id}")
            raise ValidationError("–ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

        serializer = ClientProfileSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        serializer.save(user=request.user)
        logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request.user.id}")
        return Response(serializer.data, status=status.HTTP_201_CREATED)

    @extend_schema(
        tags=["–ö–ª–∏–µ–Ω—Ç"],
        summary="–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞",
        request=ClientProfileSerializer,
        responses={200: ClientProfileSerializer}
    )
    def update(self, request):
        profile = self.get_object()
        serializer = ClientProfileSerializer(profile, data=request.data)
        serializer.is_valid(raise_exception=True)
        serializer.save()
        logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request.user.id}")
        return Response(serializer.data)

    @extend_schema(
        tags=["–ö–ª–∏–µ–Ω—Ç"],
        summary="–ß–∞—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞",
        request=ClientProfileSerializer,
        responses={200: ClientProfileSerializer}
    )
    def partial_update(self, request):
        profile = self.get_object()
        serializer = ClientProfileSerializer(profile, data=request.data, partial=True)
        serializer.is_valid(raise_exception=True)
        serializer.save()
        logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å —á–∞—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request.user.id}")
        return Response(serializer.data)

    @extend_schema(exclude=True)
    def destroy(self, request):
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {request.user.id}")
        return Response({"detail": "–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–ø—Ä–µ—â–µ–Ω–æ."}, status=status.HTTP_405_METHOD_NOT_ALLOWED)


class PublicPsychologistProfileView(APIView):
    """
    üîπ –ü—É–±–ª–∏—á–Ω—ã–π API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞ (–¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤)
    """
    permission_classes = [AllowAny]

    @extend_schema(
        tags=["–ü—É–±–ª–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞"],
        description="–≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç—É –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Å–∏—Ö–æ–ª–æ–≥–µ –ø–æ –µ–≥–æ ID.",
        responses={200: PsychologistProfileSerializer}
    )
    def get(self, request, psychologist_id: int):
        psychologist = get_object_or_404(PsychologistProfile, user_id=psychologist_id)
        serializer = PsychologistProfileSerializer(psychologist)
        return Response(serializer.data, status=status.HTTP_200_OK)

class PublicQualificationView(APIView):
    """
    üîπ –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–∏ –∫–ª–∏–µ–Ω—Ç–∞–º) –ø–æ–ª—É—á–∞—Ç—å –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é –ø—Å–∏—Ö–æ–ª–æ–≥–∞.
    """
    permission_classes = [AllowAny]

    @extend_schema(
        tags=["–ü—É–±–ª–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞"],
        summary="–ü–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—É—é –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é –ø—Å–∏—Ö–æ–ª–æ–≥–∞",
        responses={200: QualificationSerializer}
    )
    def get(self, request, psychologist_id: int):
        application = get_object_or_404(PsychologistApplication, user_id=psychologist_id)
        serializer = QualificationSerializer(application)
        return Response(serializer.data, status=status.HTTP_200_OK)

class PublicServicePriceView(APIView):
    """
    üîπ –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤–∏–¥–µ—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥ –ø—Å–∏—Ö–æ–ª–æ–≥–∞.
    """
    permission_classes = [AllowAny]

    @extend_schema(
        tags=["–ü—É–±–ª–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞"],
        summary="–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥ –ø—Å–∏—Ö–æ–ª–æ–≥–∞",
        responses={200: ServicePriceSerializer}
    )
    def get(self, request, psychologist_id: int):
        application = get_object_or_404(PsychologistApplication, user_id=psychologist_id)
        serializer = ServicePriceSerializer(application)
        return Response(serializer.data, status=status.HTTP_200_OK)

class PublicReviewListView(APIView):
    """
    üîπ –ö–ª–∏–µ–Ω—Ç—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ—Ç–∑—ã–≤—ã –æ –ø—Å–∏—Ö–æ–ª–æ–≥–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    """
    permission_classes = [AllowAny]  # –î–æ—Å—Ç—É–ø –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    pagination_class = PageNumberPagination  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø–∞–≥–∏–Ω–∞—Ü–∏—é

    @extend_schema(
        tags=["–ü—É–±–ª–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞"],
        summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤ –æ –ø—Å–∏—Ö–æ–ª–æ–≥–µ",
        responses={200: ReviewSerializer(many=True)}
    )
    def get(self, request, psychologist_id: int):
        psychologist = get_object_or_404(PsychologistProfile, user_id=psychologist_id)
        reviews = Review.objects.filter(psychologist=psychologist).order_by("-created_at")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –ø–∞–≥–∏–Ω–∞—Ü–∏—é APIView
        paginator = self.pagination_class()
        paginated_reviews = paginator.paginate_queryset(reviews, request, view=self)

        if paginated_reviews is not None:
            serializer = ReviewSerializer(paginated_reviews, many=True)
            return paginator.get_paginated_response(serializer.data)

        # –ï—Å–ª–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –≤–µ—Ä–Ω—É—Ç—å –ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤
        serializer = ReviewSerializer(reviews, many=True)
        return Response(serializer.data, status=status.HTTP_200_OK)

class PublicFAQView(APIView):
    """
    üîπ –ö–ª–∏–µ–Ω—Ç—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å FAQ –ø—Å–∏—Ö–æ–ª–æ–≥–∞.
    """
    permission_classes = [AllowAny]

    @extend_schema(
        tags=["–ü—É–±–ª–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞"],
        summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ FAQ –ø—Å–∏—Ö–æ–ª–æ–≥–∞",
        responses={200: FAQListSerializer}
    )
    def get(self, request, psychologist_id: int):
        application = get_object_or_404(PsychologistApplication, user_id=psychologist_id)
        faqs = application.faqs.all()
        serializer = FAQListSerializer({"faqs": faqs})
        return Response(serializer.data, status=status.HTTP_200_OK)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞
class PsychologistSelfProfileView(APIView):
    """
    üîπ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞
    """
    permission_classes = [IsAuthenticated]

    @extend_schema(
        tags=["–ü—Å–∏—Ö–æ–ª–æ–≥"],
        description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞.",
        responses={200: PsychologistProfileSerializer}
    )
    def get(self, request):
        try:
            psychologist_profile = request.user.psychologist_profile
        except PsychologistProfile.DoesNotExist:
            return Response({"error": "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø—Å–∏—Ö–æ–ª–æ–≥."}, status=status.HTTP_403_FORBIDDEN)

        serializer = PsychologistProfileSerializer(psychologist_profile)
        return Response(serializer.data, status=status.HTTP_200_OK)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞
class PsychologistProfileView(APIView):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤–µ—Å—å –ø—Ä–æ—Ñ–∏–ª—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞, –≤–∫–ª—é—á–∞—è –æ—Ç–∑—ã–≤—ã.
    """
    permission_classes = [IsAuthenticated]

    @extend_schema(
        tags=["–ü—Å–∏—Ö–æ–ª–æ–≥"],
        summary="–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∑–∞—è–≤–∫–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞",
        description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞, –≤–∫–ª—é—á–∞—è –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é, —É—Å–ª—É–≥–∏, FAQ –∏ –æ—Ç–∑—ã–≤—ã.",
        responses={200: OpenApiResponse(description="–ü–æ–ª–Ω–∞—è –∑–∞—è–≤–∫–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∞")}
    )
    def get(self, request):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –ø—Å–∏—Ö–æ–ª–æ–≥–∞
            application = PsychologistApplication.objects.filter(user=request.user).first()

            if not application:
                logger.error(f"–ó–∞—è–≤–∫–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request.user.id}")
                return Response({"error": "–ó–∞—è–≤–∫–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."}, status=status.HTTP_404_NOT_FOUND)

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã (–µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∑–∞—è–≤–∫–µ)
            reviews = Review.objects.filter(psychologist__application=application).order_by("-created_at")
            reviews_serializer = ReviewSerializer(reviews, many=True)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            data = {
                "personal_info": PersonalInfoSerializer(application).data,
                "qualification": QualificationSerializer(application).data,
                "service_price": ServicePriceSerializer(application).data,
                "faq": FAQListSerializer({"faqs": application.faqs.all()}).data,
                "reviews": reviews_serializer.data,
            }

            return Response(data, status=status.HTTP_200_OK)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞: {str(e)}")
            return Response({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞."},
                            status=status.HTTP_500_INTERNAL_SERVER_ERROR)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞
class PersonalInfoView(APIView):
    permission_classes = [IsAuthenticated]

    @extend_schema(
        tags=["–ü—Å–∏—Ö–æ–ª–æ–≥"],
        summary="–ü–æ–ª—É—á–∏—Ç—å –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Å–∏—Ö–æ–ª–æ–≥–∞",
        responses={200: PersonalInfoSerializer}
    )
    def get(self, request):
        try:
            application = get_object_or_404(PsychologistApplication, user=request.user)
            serializer = PersonalInfoSerializer(application)
            return Response(serializer.data, status=status.HTTP_200_OK)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}")
            return Response({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."},
                            status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    @extend_schema(
        tags=["–ü—Å–∏—Ö–æ–ª–æ–≥"],
        summary="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Å–∏—Ö–æ–ª–æ–≥–∞",
        request=PersonalInfoSerializer,
        responses={200: PersonalInfoSerializer}
    )
    def post(self, request):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞—è–≤–∫–∞
            application, created = PsychologistApplication.objects.get_or_create(user=request.user)

            if created:
                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request.user.id}")
            else:
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request.user.id}")

            # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
            serializer = PersonalInfoSerializer(application, data=request.data, partial=True)

            if serializer.is_valid():
                serializer.save()
                return Response(serializer.data, status=status.HTTP_200_OK)

            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}")
            return Response({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."},
                            status=status.HTTP_500_INTERNAL_SERVER_ERROR)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏
class QualificationView(APIView):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞, –≤–∫–ª—é—á–∞—è –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤.
    """
    permission_classes = [IsAuthenticated]
    parser_classes = (MultiPartParser, FormParser)

    @extend_schema(
        tags=["–ü—Å–∏—Ö–æ–ª–æ–≥"],
        summary="–ü–æ–ª—É—á–∏—Ç—å –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é –ø—Å–∏—Ö–æ–ª–æ–≥–∞",
        responses={200: QualificationSerializer}
    )
    def get(self, request):
        try:
            application = get_object_or_404(PsychologistApplication, user=request.user)
            serializer = QualificationSerializer(application)
            return Response(serializer.data, status=status.HTTP_200_OK)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}")
            return Response({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é."},
                            status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    @extend_schema(
        tags=["–ü—Å–∏—Ö–æ–ª–æ–≥"],
        summary="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é –ø—Å–∏—Ö–æ–ª–æ–≥–∞",
        request=QualificationSerializer,
        responses={200: QualificationSerializer}
    )
    def post(self, request):
        try:
            application = get_object_or_404(PsychologistApplication, user=request.user)
            serializer = QualificationSerializer(application, data=request.data, partial=True)

            if serializer.is_valid():
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏
                serializer.save()

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
                office_photo = serializer.validated_data.get('office_photo')
                education_files = serializer.validated_data.get('education_files', [])

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –æ—Ñ–∏—Å–∞
                if office_photo:
                    application.office_photo = office_photo

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏
                for file_data in education_files:
                    document = file_data.get('document')
                    year = file_data.get('year')
                    title = file_data.get('title') or document.name
                    file_signature = file_data.get('file_signature', "")

                    EducationDocument.objects.create(
                        psychologist_application=application,
                        document=document,
                        year=year,
                        title=title,
                        file_signature=file_signature
                    )

                application.save()

                return Response(serializer.data, status=status.HTTP_200_OK)

            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}")
            return Response(
                {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é.", "details": str(e)},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥
class ServicePriceView(APIView):
    permission_classes = [IsAuthenticated]

    @extend_schema(
        tags=["–ü—Å–∏—Ö–æ–ª–æ–≥"],
        summary="–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥ –ø—Å–∏—Ö–æ–ª–æ–≥–∞",
        responses={200: ServicePriceSerializer}
    )
    def get(self, request):
        application = get_object_or_404(PsychologistApplication, user=request.user)
        serializer = ServicePriceSerializer(application)
        return Response(serializer.data, status=status.HTTP_200_OK)

    @extend_schema(
        tags=["–ü—Å–∏—Ö–æ–ª–æ–≥"],
        summary="–î–æ–±–∞–≤–∏—Ç—å –æ–¥–Ω—É —É—Å–ª—É–≥—É (—Å–µ—Å—Å–∏—é)",
        request=SessionItemSerializer,
        responses={200: ServicePriceSerializer}
    )
    def post(self, request):
        application = get_object_or_404(PsychologistApplication, user=request.user)
        session_data = request.data

        if not isinstance(session_data, dict):
            return Response({"error": "–û–∂–∏–¥–∞–ª–∞—Å—å –æ–¥–Ω–∞ —Å–µ—Å—Å–∏—è, –∫–∞–∫ –æ–±—ä–µ–∫—Ç."}, status=status.HTTP_400_BAD_REQUEST)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º UUID
        if "id" not in session_data:
            session_data["id"] = str(uuid.uuid4())

        # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Ç–µ–∫—É—â–∏–º
        sessions = application.service_sessions or []
        sessions.append(session_data)

        application.service_sessions = sessions
        application.save(update_fields=["service_sessions"])

        serializer = ServicePriceSerializer(application)
        return Response(serializer.data, status=status.HTTP_200_OK)

class ServicePriceSessionDetailView(APIView):
    permission_classes = [IsAuthenticated]

    @extend_schema(
        tags=["–ü—Å–∏—Ö–æ–ª–æ–≥"],
        summary="–ü–æ–ª—É—á–∏—Ç—å –æ–¥–Ω—É —É—Å–ª—É–≥—É –ø–æ ID",
        responses={200: SessionItemSerializer}
    )
    def get(self, request, session_id):
        application = get_object_or_404(PsychologistApplication, user=request.user)
        sessions = application.service_sessions or []

        session = next((s for s in sessions if str(s.get("id")) == str(session_id)), None)
        if not session:
            return Response({"error": "–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}, status=status.HTTP_404_NOT_FOUND)

        return Response(session, status=status.HTTP_200_OK)

    @extend_schema(
        tags=["–ü—Å–∏—Ö–æ–ª–æ–≥"],
        summary="–û–±–Ω–æ–≤–∏—Ç—å —É—Å–ª—É–≥—É –ø–æ ID",
        request=SessionItemSerializer,
        responses={200: SessionItemSerializer}
    )
    def put(self, request, session_id):
        application = get_object_or_404(PsychologistApplication, user=request.user)
        sessions = application.service_sessions or []

        updated = False
        new_data = request.data

        for idx, session in enumerate(sessions):
            if str(session.get("id")) == str(session_id):
                sessions[idx] = {**session, **new_data, "id": session_id}
                updated = True
                break

        if not updated:
            return Response({"error": "–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}, status=status.HTTP_404_NOT_FOUND)

        application.service_sessions = sessions
        application.save(update_fields=["service_sessions"])
        return Response(sessions[idx], status=status.HTTP_200_OK)

    @extend_schema(
        tags=["–ü—Å–∏—Ö–æ–ª–æ–≥"],
        summary="–£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É –ø–æ ID",
        responses={204: None}
    )
    def delete(self, request, session_id):
        application = get_object_or_404(PsychologistApplication, user=request.user)
        sessions = application.service_sessions or []

        # –ü—Ä–∏–≤–æ–¥–∏–º session_id –∫ —Å—Ç—Ä–æ–∫–µ, —Ç.–∫. id –≤–Ω—É—Ç—Ä–∏ —Å–µ—Å—Å–∏–π ‚Äî —Å—Ç—Ä–æ–∫–∏
        session_id = str(session_id)

        new_sessions = [s for s in sessions if str(s.get("id")) != session_id]

        if len(new_sessions) == len(sessions):
            return Response({"error": "–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}, status=status.HTTP_404_NOT_FOUND)

        application.service_sessions = new_sessions
        application.save(update_fields=["service_sessions"])
        return Response(status=status.HTTP_204_NO_CONTENT)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ FAQ –ø—Å–∏—Ö–æ–ª–æ–≥–∞
class FAQView(APIView):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ FAQ –ø—Å–∏—Ö–æ–ª–æ–≥–∞.
    """
    permission_classes = [IsAuthenticated]

    @extend_schema(
        tags=["–ü—Å–∏—Ö–æ–ª–æ–≥"],
        operation_id="get_faqs",
        summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ FAQ —Ç–µ–∫—É—â–µ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞.",
        responses={200: FAQListSerializer, 404: {"description": "FAQ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."}},
    )
    def get(self, request):
        try:
            application = get_object_or_404(PsychologistApplication, user=request.user)
            faqs = application.faqs.all()

            serializer = FAQListSerializer({"faqs": faqs})
            return Response(serializer.data, status=status.HTTP_200_OK)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ FAQ: {str(e)}")
            return Response({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å FAQ."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    @extend_schema(
        tags=["–ü—Å–∏—Ö–æ–ª–æ–≥"],
        operation_id="update_faq",
        summary="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ FAQ (–∑–∞–º–µ–Ω—è–µ—Ç –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã).",
        request=FAQListSerializer,
        responses={200: {"description": "FAQ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ."}, 400: {"description": "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏."}},
    )
    def post(self, request):
        try:
            application = get_object_or_404(PsychologistApplication, user=request.user)

            serializer = FAQListSerializer(data=request.data)
            if serializer.is_valid():
                application.faqs.all().delete()

                faqs_data = serializer.validated_data.get("faqs", [])
                new_faqs = [PsychologistFAQ(application=application, **faq) for faq in faqs_data]

                PsychologistFAQ.objects.bulk_create(new_faqs)

                return Response({"message": "FAQ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ."}, status=status.HTTP_200_OK)

            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ FAQ: {str(e)}")
            return Response({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å FAQ."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
class DocumentView(APIView):
    permission_classes = [IsAuthenticated]

    @extend_schema(
        tags=["–ü—Å–∏—Ö–æ–ª–æ–≥"],
        request=DocumentSerializer,
        responses={200: DocumentSerializer}
    )
    def post(self, request):
        try:
            application = get_object_or_404(PsychologistApplication, user=request.user)

            if "document" not in request.FILES:
                return Response({"error": "–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω."}, status=status.HTTP_400_BAD_REQUEST)

            serializer = DocumentSerializer(application, data=request.data, partial=True)

            if serializer.is_valid():
                document = request.FILES["document"]
                EducationDocument.objects.create(
                    psychologist_application=application,
                    document=document,
                    title=document.name
                )
                return Response({"message": "–î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω."}, status=status.HTTP_201_CREATED)

            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

        except PsychologistApplication.DoesNotExist:
            return Response({"error": "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."}, status=status.HTTP_404_NOT_FOUND)

class ReviewListView(APIView):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –æ –ø—Å–∏—Ö–æ–ª–æ–≥–µ"""
    permission_classes = [AllowAny]

    @extend_schema(
        tags=["–ü—Å–∏—Ö–æ–ª–æ–≥"],
        summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤ –æ –ø—Å–∏—Ö–æ–ª–æ–≥–µ",
        description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –æ—Ç–∑—ã–≤—ã, –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞.",
        parameters=[
            OpenApiParameter(name="psychologist_id", description="ID –ø—Å–∏—Ö–æ–ª–æ–≥–∞", required=True, type=int),
            OpenApiParameter(name="page", description="–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–∞–≥–∏–Ω–∞—Ü–∏—è)", required=False, type=int),
            OpenApiParameter(name="page_size", description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ", required=False, type=int),
        ],
        responses={200: ReviewSerializer(many=True)}
    )
    def get(self, request):
        psychologist_id = request.query_params.get("psychologist_id")

        if not psychologist_id:
            return Response({"error": "–ù–µ —É–∫–∞–∑–∞–Ω ID –ø—Å–∏—Ö–æ–ª–æ–≥–∞."}, status=status.HTTP_400_BAD_REQUEST)

        psychologist = get_object_or_404(PsychologistProfile, id=psychologist_id)
        reviews = Review.objects.filter(psychologist=psychologist).order_by("-created_at")

        paginator = PageNumberPagination()
        paginated_reviews = paginator.paginate_queryset(reviews, request)
        serializer = ReviewSerializer(paginated_reviews, many=True)

        return paginator.get_paginated_response(serializer.data)

class ReviewCreateView(APIView):
    permission_classes = [IsAuthenticated]

    @extend_schema(
        tags=["–ö–ª–∏–µ–Ω—Ç"],
        summary="–°–æ–∑–¥–∞—Ç—å –æ—Ç–∑—ã–≤ (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏)",
        description="–û—Ç–∑—ã–≤ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏, –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ —Å–µ—Å—Å–∏—é.",
        request=ReviewSerializer,
        responses={201: ReviewSerializer}
    )
    def post(self, request):
        client = request.user.clientprofile
        rating = request.data.get("rating")
        text = request.data.get("text", "")

        if rating is None or not (1 <= int(rating) <= 5):
            return Response({"error": "–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5."}, status=400)

        try:
            session = Session.objects.filter(
                client=client, status="COMPLETED", review_submitted=False
            ).latest("end_time")
        except Session.DoesNotExist:
            return Response({"error": "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ—Ç–∑—ã–≤–∞."}, status=400)

        review = Review.objects.create(
            session=session,
            client=client,
            psychologist=session.psychologist,
            rating=rating,
            text=text
        )

        session.review_submitted = True
        session.save()

        return Response(ReviewSerializer(review).data, status=201)

class PsychologistSessionView(APIView):
    """
    üîπ –ü—Å–∏—Ö–æ–ª–æ–≥ –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∫–ª–∏–µ–Ω—Ç–æ–≤ –∫ –Ω–µ–º—É.
    """
    permission_classes = [IsAuthenticated]

    class CustomPagination(PageNumberPagination):
        page_size = 10  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    @extend_schema(
        tags=["–ü—Å–∏—Ö–æ–ª–æ–≥"],
        summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –∫–ª–∏–µ–Ω—Ç–æ–≤ –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É",
        description="–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥—É —É–≤–∏–¥–µ—Ç—å –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –∫ –Ω–µ–º—É, –≤–∫–ª—é—á–∞—è –¥–∞—Ç—É, –≤—Ä–µ–º—è –∏ —Å—Ç–∞—Ç—É—Å —Å–µ–∞–Ω—Å–∞.",
        responses={
            200: OpenApiResponse(response=SessionSerializer(many=True), description="–°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –∫–ª–∏–µ–Ω—Ç–æ–≤"),
            403: OpenApiResponse(description="–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø—Å–∏—Ö–æ–ª–æ–≥."),
        },
    )
    def get(self, request):
        """
        üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∫–ª–∏–µ–Ω—Ç–æ–≤ –∫ —Ç–µ–∫—É—â–µ–º—É –ø—Å–∏—Ö–æ–ª–æ–≥—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
        """
        try:
            psychologist_profile = request.user.psychologist_profile
        except PsychologistProfile.DoesNotExist:
            return Response(
                {"error": "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø—Å–∏—Ö–æ–ª–æ–≥."},
                status=status.HTTP_403_FORBIDDEN
            )

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏, –≥–¥–µ –ø—Å–∏—Ö–æ–ª–æ–≥ - —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        sessions = Session.objects.filter(psychologist=psychologist_profile).order_by('start_time')

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        paginator = self.CustomPagination()
        paginated_sessions = paginator.paginate_queryset(sessions, request, view=self)
        serializer = SessionSerializer(paginated_sessions, many=True)

        return paginator.get_paginated_response(serializer.data)

class ChangePasswordView(APIView):
    permission_classes = [IsAuthenticated]

    @extend_schema(
        summary="–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è",
        description="–ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å, —É–∫–∞–∑–∞–≤ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å.",
        request=ChangePasswordSerializer,
        responses={200: {"message": "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω"}},
    )
    def post(self, request):
        serializer = self.ChangePasswordSerializer(data=request.data)
        if serializer.is_valid():
            user = request.user

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
            if not user.check_password(serializer.validated_data["current_password"]):
                return Response({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å."}, status=status.HTTP_400_BAD_REQUEST)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
            user.set_password(serializer.validated_data["new_password"])
            user.save()

            return Response({"message": "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω."}, status=status.HTTP_200_OK)

        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

class AdminApprovePsychologistView(GenericAPIView):
    queryset = PsychologistApplication.objects.all()
    serializer_class = PsychologistApplicationSerializer
    permission_classes = [IsAdminUser]

    @extend_schema(
        tags=["–ê–¥–º–∏–Ω"],
        responses={
            200: PsychologistApplicationSerializer(many=True),
        },
    )
    def get(self, request):
        applications = PsychologistApplication.objects.all()
        serializer = PsychologistApplicationSerializer(applications, many=True)
        return Response(serializer.data, status=status.HTTP_200_OK)

    @extend_schema(
        parameters=[
            OpenApiParameter("application_id", description="Application ID", required=True, type=int),
        ],
        responses={
            200: OpenApiResponse(description="Psychologist approved successfully."),
            400: OpenApiResponse(description="Invalid action."),
            404: OpenApiResponse(description="Application not found."),
        },
    )
    def post(self, request, application_id):
        try:
            application = PsychologistApplication.objects.get(id=application_id)

            if application.status != "PENDING":
                return Response(
                    {"error": "Application has already been reviewed."},
                    status=status.HTTP_400_BAD_REQUEST,
                )

            action = request.data.get("action")

            if action == "APPROVE":
                application.status = "APPROVED"
                application.save()

                user = application.user
                user.is_psychologist = True
                user.save()

                profile, _ = PsychologistProfile.objects.get_or_create(user=user, application=application)
                profile.is_verified = True
                profile.update_catalog_visibility()  # –≤–∞–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–∞—Ç–∞–ª–æ–≥–µ

                send_approval_email(application)  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏

                return Response(
                    {"message": "Psychologist approved successfully."},
                    status=status.HTTP_200_OK,
                )

            elif action == "REJECT":
                application.status = "REJECTED"
                application.save()

                send_rejection_email(application)  # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏

                return Response(
                    {"message": "Psychologist application rejected."},
                    status=status.HTTP_200_OK,
                )
            else:
                return Response(
                    {"error": "Invalid action."}, status=status.HTTP_400_BAD_REQUEST
                )

        except PsychologistApplication.DoesNotExist:
            return Response(
                {"error": "Application not found."}, status=status.HTTP_404_NOT_FOUND
            )

class TopicListView(APIView):
    def get(self, request):
        topics = Topic.objects.all()
        serializer = TopicSerializer(topics, many=True)
        return Response(serializer.data, status=status.HTTP_200_OK)

class ScheduleSessionView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        """
        üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∫–ª–∏–µ–Ω—Ç–∞
        """
        try:
            client_profile = request.user.client_profile
        except ClientProfile.DoesNotExist:
            logger.error(f"ScheduleSessionView: User {request.user.id} is not a client.")
            return Response(
                {"error": "–¢–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏."},
                status=status.HTTP_403_FORBIDDEN
            )

        sessions = Session.objects.filter(client=client_profile).order_by('start_time')
        serializer = SessionSerializer(sessions, many=True)
        return Response(serializer.data, status=status.HTTP_200_OK)

    def post(self, request):
        """
        üîπ –ó–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —Å–µ–∞–Ω—Å
        """
        try:
            client_profile = request.user.client_profile
        except ClientProfile.DoesNotExist:
            logger.error(f"ScheduleSessionView: User {request.user.id} is not a client.")
            return Response(
                {"error": "–¢–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ —Å–µ–∞–Ω—Å."},
                status=status.HTTP_403_FORBIDDEN
            )

        data = request.data.copy()
        psychologist_id = data.get("psychologist")

        if not psychologist_id:
            return Response({"error": "–ü–∞—Ä–∞–º–µ—Ç—Ä 'psychologist' (ID) –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω."},
                            status=status.HTTP_400_BAD_REQUEST)

        psychologist_profile = get_object_or_404(PsychologistProfile, pk=psychologist_id)

        if not psychologist_profile.user.is_psychologist:
            return Response({"error": "–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º."},
                            status=status.HTTP_400_BAD_REQUEST)

        if not psychologist_profile.is_verified:
            return Response({"error": "–ü—Å–∏—Ö–æ–ª–æ–≥ –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω."},
                            status=status.HTTP_400_BAD_REQUEST)

        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        try:
            session_time = make_aware(datetime(
                int(data["year"]), int(data["month"]), int(data["day"]),
                int(data["hour"]), int(data["minute"])
            ))
        except (ValueError, KeyError):
            return Response({"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏."},
                            status=status.HTTP_400_BAD_REQUEST)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
        existing_session = Session.objects.filter(
            psychologist=psychologist_profile,
            start_time=session_time,
            status__in=["scheduled", "in_progress"]
        ).exists()

        if existing_session:
            return Response({"error": "–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ —É –ø—Å–∏—Ö–æ–ª–æ–≥–∞."},
                            status=status.HTTP_400_BAD_REQUEST)

        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        serializer = SessionCreateSerializer(data=data, context={'request': request})
        if serializer.is_valid():
            session_obj = serializer.save()
            logger.info(f"Session #{session_obj.id} created (client {client_profile.pk}, psych {psychologist_id}).")

            self.notify_client(client_profile, session_obj)
            self.notify_psychologist(psychologist_profile, session_obj)

            return Response(SessionCreateSerializer(session_obj).data, status=status.HTTP_201_CREATED)

        logger.error(f"SessionCreateSerializer invalid: {serializer.errors}")
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    def delete(self, request, session_id):
        """
        üîπ –ö–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –∑–∞–ø–∏—Å—å
        """
        try:
            client_profile = request.user.client_profile
        except ClientProfile.DoesNotExist:
            return Response({"error": "–¢–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω—è—Ç—å —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏."},
                            status=status.HTTP_403_FORBIDDEN)

        session = get_object_or_404(Session, id=session_id, client=client_profile)

        if session.status not in ["scheduled", "pending"]:
            return Response({"error": "–ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å —Å–µ–∞–Ω—Å, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –ø—Ä–æ—à–µ–ª –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ."},
                            status=status.HTTP_400_BAD_REQUEST)

        session.status = "canceled"
        session.save()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        self.notify_cancellation(client_profile, session)

        return Response({"message": "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞."}, status=status.HTTP_200_OK)

    def notify_client(self, client_profile, session_obj):
        """üîπ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Telegram –∏ Email"""
        telegram_id = getattr(client_profile.user, 'telegram_id', None)
        if telegram_id:
            try:
                bot.send_message(
                    chat_id=telegram_id,
                    text=f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–µ–∞–Ω—Å #{session_obj.id} (–≤—Ä–µ–º—è: {session_obj.start_time})."
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É –≤ Telegram: {str(e)}")

        email = client_profile.user.email
        if email:
            subject = "–ó–∞–ø–∏—Å—å –Ω–∞ —Å–µ–∞–Ω—Å"
            body = (
                f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–µ–∞–Ω—Å #{session_obj.id}!\n"
                f"–î–∞—Ç–∞/–≤—Ä–µ–º—è: {session_obj.start_time}\n"
                f"–°—Ç–∞—Ç—É—Å: {session_obj.status}\n\n"
                "–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n–í–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è."
            )
            send_email_async.delay(subject, body, [email])

    def notify_psychologist(self, psychologist_profile, session_obj):
        """üîπ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ —á–µ—Ä–µ–∑ Telegram –∏ Email"""
        telegram_id = getattr(psychologist_profile.user, 'telegram_id', None)
        if telegram_id:
            try:
                bot.send_message(
                    chat_id=telegram_id,
                    text=(
                        f"–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ —Å–µ–∞–Ω—Å #{session_obj.id} "
                        f"–æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ #{session_obj.client.pk}.\n"
                        f"–í—Ä–µ–º—è: {session_obj.start_time}."
                    )
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Å–∏—Ö–æ–ª–æ–≥—É –≤ Telegram: {str(e)}")

        email = psychologist_profile.user.email
        if email:
            subject = "–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ —Å–µ–∞–Ω—Å"
            body = (
                f"–£ –≤–∞—Å –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å (Session #{session_obj.id})!\n"
                f"–û—Ç –∫–ª–∏–µ–Ω—Ç–∞: #{session_obj.client.pk}.\n"
                f"–î–∞—Ç–∞/–≤—Ä–µ–º—è: {session_obj.start_time}\n"
                f"–°—Ç–∞—Ç—É—Å: {session_obj.status}\n\n"
                "–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n–í–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è."
            )
            send_email_async.delay(subject, body, [email])

    def notify_cancellation(self, client_profile, session_obj):
        """üîπ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏"""
        telegram_id = getattr(client_profile.user, 'telegram_id', None)
        if telegram_id:
            try:
                bot.send_message(
                    chat_id=telegram_id,
                    text=f"–í–∞—à–∞ –∑–∞–ø–∏—Å—å #{session_obj.id} –æ—Ç–º–µ–Ω–µ–Ω–∞."
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É –≤ Telegram: {str(e)}")

        email = client_profile.user.email
        if email:
            subject = "–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏"
            body = (
                f"–í–∞—à–∞ –∑–∞–ø–∏—Å—å #{session_obj.id} –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
                f"–î–∞—Ç–∞/–≤—Ä–µ–º—è: {session_obj.start_time}\n"
                f"–°—Ç–∞—Ç—É—Å: –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
                "–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n–í–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è."
            )
            send_email_async.delay(subject, body, [email])

