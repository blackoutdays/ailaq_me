#views
import hmac
from asgiref.sync import async_to_sync
from django.utils.timezone import now
import time
from django.http import JsonResponse
from hashlib import sha256
from rest_framework import status, viewsets
from rest_framework.generics import GenericAPIView, ListCreateAPIView, RetrieveUpdateDestroyAPIView
from rest_framework.permissions import IsAuthenticated, IsAdminUser, AllowAny
from rest_framework.views import APIView
from django.db.models import Q
from rest_framework_simplejwt.tokens import RefreshToken
from rest_framework.response import Response
from drf_spectacular.utils import extend_schema, OpenApiResponse, OpenApiParameter
from config import settings
from .models import PsychologistProfile, PsychologistApplication, PurchasedRequest, ClientProfile, CustomUser, \
    PsychologistFAQ, Review, Session, QuickClientConsultationRequest, Topic
from .serializers import (
    CustomUserCreationSerializer,
    LoginSerializer,
    PsychologistProfileSerializer,
    PsychologistApplicationSerializer, ClientProfileSerializer, ReviewSerializer, CatalogSerializer,
    BuyRequestSerializer, PersonalInfoSerializer, QualificationSerializer, DocumentSerializer,
    FAQSerializer, FAQListSerializer, TopicSerializer, QuickClientConsultationRequestSerializer, TelegramAuthSerializer
)
from .permissions import IsVerifiedPsychologist
from .pagination import StandardResultsSetPagination
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
import telegram
import logging
logger = logging.getLogger(__name__)

bot = telegram.Bot(token=settings.TELEGRAM_BOT_TOKEN)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@method_decorator(csrf_exempt, name='dispatch')
class RegisterUserView(APIView):
    @extend_schema(
        operation_id="register_user",
        description="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
        request=CustomUserCreationSerializer,
        responses={
            201: OpenApiResponse(description="User registered successfully."),
            400: OpenApiResponse(description="Invalid data."),
        },
    )
    def post(self, request):
        try:
            serializer = CustomUserCreationSerializer(data=request.data)
            if serializer.is_valid():
                user = serializer.save()
                if user.wants_to_be_psychologist:
                    PsychologistApplication.objects.get_or_create(user=user)

                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤
                refresh = RefreshToken.for_user(user)
                return Response(
                    {
                        "access_token": str(refresh.access_token),
                        "refresh_token": str(refresh),
                        "verification_code": user.verification_code  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    },
                    status=status.HTTP_201_CREATED,
                )
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            logger.error(f"Error during user registration: {str(e)}")
            return Response({"error": "Internal server error. Please try again later."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class LoginView(APIView):
    @extend_schema(
        operation_id="login_user",
        description="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
        request=LoginSerializer,
        responses={
            200: OpenApiResponse(description="Login successful."),
            400: OpenApiResponse(description="Invalid credentials."),
        },
    )
    def post(self, request):
        serializer = LoginSerializer(data=request.data)
        if serializer.is_valid():
            email = serializer.validated_data["email"]
            password = serializer.validated_data["password"]

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = CustomUser.objects.filter(email=email).first()
            if user and user.check_password(password):
                refresh = RefreshToken.for_user(user)
                return Response(
                    {
                        "access_token": str(refresh.access_token),
                        "refresh_token": str(refresh),
                    },
                    status=status.HTTP_200_OK,
                )
        return Response({"error": "Invalid credentials."}, status=status.HTTP_400_BAD_REQUEST)


class QuickClientConsultationAPIView(APIView):

    @extend_schema(
        request=QuickClientConsultationRequestSerializer,
        responses={201: QuickClientConsultationRequestSerializer},
        description="–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –±—ã—Å—Ç—Ä—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–∂–µ—Ç Telegram."
    )
    def post(self, request):
        serializer = QuickClientConsultationRequestSerializer(data=request.data)
        if serializer.is_valid():
            consultation_request = serializer.save()

            # üîπ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            bot_info = async_to_sync(self.get_bot_info)()
            redirect_url = f"https://t.me/{bot_info.username}?start=quick_{consultation_request.verification_code}"

            # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ telegram_id, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if consultation_request.telegram_id:
                async_to_sync(self.send_telegram_message)(consultation_request.telegram_id, consultation_request.pk)

            return JsonResponse(
                {
                    "message": "–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞",
                    "redirect_url": redirect_url,
                    "verification_code": consultation_request.verification_code
                },
                status=status.HTTP_201_CREATED
            )

        return JsonResponse(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    # üîπ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –±–æ—Ç–∞ (—Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º –º–µ—Ç–æ–¥–æ–º, —Ç–∞–∫ –∫–∞–∫ –≤–Ω—É—Ç—Ä–∏ APIView)
    @staticmethod
    async def get_bot_info():
        return await bot.get_me()

    @staticmethod
    async def send_telegram_message(chat_id, consultation_id):
        await bot.send_message(
            chat_id=chat_id,
            text=f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. ID –∑–∞—è–≤–∫–∏: {consultation_id}"
        )

class SubmitPsychologistApplicationView(APIView):
    permission_classes = [IsAuthenticated]

    @extend_schema(
        request=PsychologistApplicationSerializer,
        responses={
            201: OpenApiResponse(description="Application submitted successfully."),
            400: OpenApiResponse(description="Invalid data."),
        },
    )
    def post(self, request):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º
        if not request.user.wants_to_be_psychologist:
            return Response(
                {"error": "You are not eligible to submit an application."},
                status=status.HTTP_400_BAD_REQUEST,
            )

        # –ü–µ—Ä–µ–¥–∞—ë–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        serializer = PsychologistApplicationSerializer(
            data=request.data, context={"request": request}
        )
        if serializer.is_valid():
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É
            serializer.save()
            return Response(
                {"message": "Application submitted successfully."},
                status=status.HTTP_201_CREATED,
            )
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class UpdatePsychologistProfileView(APIView):
    permission_classes = [IsAuthenticated]

    @extend_schema(
        request=PsychologistProfileSerializer,
        responses={
            200: OpenApiResponse(description="–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ."),
            201: OpenApiResponse(description="–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω –∏ –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ."),
        },
    )
    def put(self, request):
        profile, created = PsychologistProfile.objects.get_or_create(user=request.user)

        serializer = PsychologistProfileSerializer(profile, data=request.data, partial=True)
        if serializer.is_valid():
            serializer.save()
            status_code = status.HTTP_201_CREATED if created else status.HTTP_200_OK
            return Response(serializer.data, status=status_code)

        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

# –°–ø–∏—Å–æ–∫ –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∫–∞—Ç–∞–ª–æ–≥
class CatalogView(APIView):
    permission_classes = [AllowAny]

    @extend_schema(
        description="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π.",
        parameters=[
            OpenApiParameter("is_verified", description="–§–∏–ª—å—Ç—Ä –ø–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏", required=False, type=bool),
            OpenApiParameter("is_in_catalog", description="–§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–ª–∏—á–∏—é –≤ –∫–∞—Ç–∞–ª–æ–≥–µ", required=False, type=bool),
            OpenApiParameter("min_requests", description="–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤", required=False, type=int),
            OpenApiParameter("max_price", description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ —Å–µ—Å—Å–∏—é", required=False, type=float),
            OpenApiParameter("sort_by", description="–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ–ª—é", required=False, type=str, default="application__id"),
        ],
    )
    def get(self, request):
        try:
            queryset = PsychologistProfile.objects.filter(is_in_catalog=True).select_related('application')

            if request.query_params.get('is_verified') is not None:
                queryset = queryset.filter(is_verified=request.query_params.get('is_verified').lower() == 'true')

            if request.query_params.get('is_in_catalog') is not None:
                queryset = queryset.filter(is_in_catalog=request.query_params.get('is_in_catalog').lower() == 'true')

            if request.query_params.get('min_requests'):
                try:
                    min_requests = int(request.query_params.get('min_requests'))
                    queryset = queryset.filter(requests_count__gte=min_requests)
                except ValueError:
                    return Response({"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è min_requests."}, status=400)

            if request.query_params.get('max_price'):
                try:
                    max_price = float(request.query_params.get('max_price'))
                    queryset = queryset.filter(application__session_price__lte=max_price)
                except ValueError:
                    return Response({"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è max_price."}, status=400)

            sort_by = request.query_params.get('sort_by', 'application__id')
            queryset = queryset.order_by(sort_by)

            # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
            pagination = StandardResultsSetPagination()
            result_page = pagination.paginate_queryset(queryset, request)
            serializer = CatalogSerializer(result_page, many=True)
            return pagination.get_paginated_response(serializer.data)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ CatalogView: {e}")
            return Response({"error": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞."}, status=500)

class ClientProfileViewSet(viewsets.ModelViewSet):
    queryset = ClientProfile.objects.all()
    serializer_class = ClientProfileSerializer

    @extend_schema(description="Retrieve a client's profile.")
    def retrieve(self, request, *args, **kwargs):
        return super().retrieve(request, *args, **kwargs)

class PsychologistProfileView(APIView):
    permission_classes = [IsAuthenticated]

    @extend_schema(
        responses={200: PsychologistProfileSerializer}
    )
    def get(self, request, psychologist_id):
        try:
            profile = PsychologistProfile.objects.get(pk=psychologist_id)
            serializer = PsychologistProfileSerializer(profile)
            return Response(serializer.data, status=200)
        except PsychologistProfile.DoesNotExist:
            return Response({"error": "Profile not found"}, status=404)

class PsychologistProfileViewSet(viewsets.ModelViewSet):
    queryset = PsychologistProfile.objects.all()
    serializer_class = PsychologistProfileSerializer
    pagination_class = StandardResultsSetPagination
    permission_classes = [IsAuthenticated]

    @extend_schema(
        description="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤.",
        responses={200: PsychologistProfileSerializer(many=True)},
    )
    def list(self, request, *args, **kwargs):
        return super().list(request, *args, **kwargs)

    @extend_schema(
        description="–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞.",
        request=PsychologistProfileSerializer,
        responses={200: PsychologistProfileSerializer},
    )
    def update(self, request, *args, **kwargs):
        return super().update(request, *args, **kwargs)


class PsychologistApplicationView(APIView):
    permission_classes = [IsAuthenticated]

    @extend_schema(
        responses={200: PsychologistApplicationSerializer(many=True)},
        description="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫."
    )
    def get(self, request):
        applications = PsychologistApplication.objects.all()
        serializer = PsychologistApplicationSerializer(applications, many=True)
        return Response(serializer.data, status=status.HTTP_200_OK)

    @extend_schema(
        request=PsychologistApplicationSerializer,
        responses={
            201: OpenApiResponse(description="–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ."),
            400: OpenApiResponse(description="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏."),
        },
    )
    def post(self, request):
        serializer = PsychologistApplicationSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save(user=request.user)
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

# —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è/–∑–∞—è–≤–∫–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞
class PersonalInfoView(APIView):
    permission_classes = [IsAuthenticated]

    @extend_schema(
        operation_id="update_personal_info",
        description="–û–±–Ω–æ–≤–∏—Ç—å –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Å–∏—Ö–æ–ª–æ–≥–∞.",
        request=PersonalInfoSerializer,
        responses={
            200: OpenApiResponse(description="–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ."),
            400: OpenApiResponse(description="–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏."),
        },
    )
    def post(self, request):
        app, created = PsychologistApplication.objects.get_or_create(user=request.user)
        serializer = PersonalInfoSerializer(app, data=request.data, partial=True)
        if serializer.is_valid():
            serializer.save()
            return Response({"message": "–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ."}, status=200)
        return Response(serializer.errors, status=400)

class QualificationView(APIView):
    permission_classes = [IsAuthenticated]

    @extend_schema(
        operation_id="update_qualification",
        description="–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞.",
        request=QualificationSerializer,
        responses={
            200: OpenApiResponse(description="–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ."),
            400: OpenApiResponse(description="–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏."),
        },
    )
    def post(self, request):
        app, created = PsychologistApplication.objects.get_or_create(user=request.user)
        serializer = QualificationSerializer(app, data=request.data, partial=True)
        if serializer.is_valid():
            serializer.save()
            return Response({"message": "–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ."}, status=200)
        return Response(serializer.errors, status=400)


class FAQView(APIView):
    permission_classes = [IsAuthenticated]

    @extend_schema(
        operation_id="get_or_update_faq",
        description="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ FAQ, –æ–¥–∏–Ω FAQ –∏–ª–∏ –ø—É—Å—Ç–æ, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.",
        request=FAQListSerializer,
        responses={
            200: FAQListSerializer,
            400: OpenApiResponse(description="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."),
        },
    )
    def post(self, request):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ FAQ –∏–ª–∏ –æ–¥–Ω–æ–≥–æ FAQ.
        """
        data = request.data.get("faqs", [])
        if isinstance(data, list):  # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ FAQ
            serializer = FAQListSerializer(data={"faqs": data})
        else:  # –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–∏–Ω FAQ
            serializer = FAQSerializer(data=request.data)

        if serializer.is_valid():
            faqs_data = serializer.validated_data.get("faqs", [])
            if faqs_data:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ FAQ
                for faq in faqs_data:
                    PsychologistFAQ.objects.create(
                        application=PsychologistApplication.objects.get(user=request.user),
                        question=faq["question"],
                        answer=faq["answer"],
                    )
                return Response({"message": "–°–ø–∏—Å–æ–∫ FAQ –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ."}, status=200)
            elif "question" in serializer.validated_data:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ FAQ
                faq = serializer.validated_data
                PsychologistFAQ.objects.create(
                    application=PsychologistApplication.objects.get(user=request.user),
                    question=faq["question"],
                    answer=faq["answer"],
                )
                return Response({"message": "FAQ –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ."}, status=200)
            else:  # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ
                return Response({"message": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è."}, status=204)
        return Response(serializer.errors, status=400)

    @extend_schema(
        operation_id="get_faqs",
        description="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ FAQ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
        responses={
            200: FAQListSerializer,
            404: OpenApiResponse(description="FAQ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."),
        },
    )
    def get(self, request):
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ FAQ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        application = PsychologistApplication.objects.filter(user=request.user).first()
        if not application:
            return Response({"error": "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."}, status=404)

        faqs = application.faqs.all()
        if not faqs.exists():
            return Response({"faqs": []}, status=200)

        serializer = FAQListSerializer({"faqs": [{"question": faq.question, "answer": faq.answer} for faq in faqs]})
        return Response(serializer.data, status=200)


class DocumentView(APIView):
    permission_classes = [IsAuthenticated]

    @extend_schema(
        operation_id="update_documents",
        description="–î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø—Å–∏—Ö–æ–ª–æ–≥–∞.",
        request=DocumentSerializer,
        responses={
            200: OpenApiResponse(description="–î–æ–∫—É–º–µ–Ω—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ."),
            400: OpenApiResponse(description="–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏."),
        },
    )
    def post(self, request):
        app, created = PsychologistApplication.objects.get_or_create(user=request.user)

        if not request.FILES:
            return Response({"error": "–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Ñ–∞–π–ª—ã."}, status=400)

        serializer = DocumentSerializer(app, data=request.data, partial=True)
        if serializer.is_valid():
            serializer.save()
            return Response({"message": "–î–æ–∫—É–º–µ–Ω—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ."}, status=200)

        return Response(serializer.errors, status=400)

#–°–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤ (GET) –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞ (POST)
class ReviewListCreateView(ListCreateAPIView):
    queryset = Review.objects.all()
    serializer_class = ReviewSerializer
    permission_classes = [IsAuthenticated]

    @extend_schema(
        summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤",
        description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ, –ø—Å–∏—Ö–æ–ª–æ–≥–µ, —Å–µ—Å—Å–∏–∏, —Ä–µ–π—Ç–∏–Ω–≥–µ –∏ —Ç–µ–∫—Å—Ç–µ –æ—Ç–∑—ã–≤–∞.",
        responses={200: ReviewSerializer(many=True)},
    )
    def get(self, request, *args, **kwargs):
        return super().get(request, *args, **kwargs)

    @extend_schema(
        summary="–°–æ–∑–¥–∞—Ç—å –æ—Ç–∑—ã–≤",
        description="–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å ID —Å–µ—Å—Å–∏–∏, —Ä–µ–π—Ç–∏–Ω–≥ –∏ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞.",
        request=ReviewSerializer,
        responses={201: ReviewSerializer},
    )
    def post(self, request, *args, **kwargs):
        return super().post(request, *args, **kwargs)

#–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–∑—ã–≤ (GET, PUT, DELETE)
class ReviewDetailView(RetrieveUpdateDestroyAPIView):
    queryset = Review.objects.all()
    serializer_class = ReviewSerializer
    permission_classes = [IsAuthenticated]

    @extend_schema(
        summary="–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤",
        description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞ –ø–æ –µ–≥–æ ID.",
        responses={200: ReviewSerializer},
    )
    def get(self, request, *args, **kwargs):
        return super().get(request, *args, **kwargs)

    @extend_schema(
        summary="–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–∑—ã–≤",
        description="–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç–∑—ã–≤. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∏ ID –æ—Ç–∑—ã–≤–∞.",
        request=ReviewSerializer,
        responses={200: ReviewSerializer},
    )
    def put(self, request, *args, **kwargs):
        return super().put(request, *args, **kwargs)

    @extend_schema(
        summary="–£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤",
        description="–£–¥–∞–ª—è–µ—Ç –æ—Ç–∑—ã–≤ –ø–æ ID. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.",
        responses={204: None},
    )
    def delete(self, request, *args, **kwargs):
        return super().delete(request, *args, **kwargs)


#	1.	–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º.
#   2.	–ï—Å–ª–∏ —Ç–∞–∫–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ.
class ReviewCreateView(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request, *args, **kwargs):
        # ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–ª–∏–µ–Ω—Ç–∞)
        client = request.user.clientprofile
        psychologist_id = request.data.get("psychologist_id")  # ID –ø—Å–∏—Ö–æ–ª–æ–≥–∞
        rating = request.data.get("rating")  # –†–µ–π—Ç–∏–Ω–≥ (1-5)
        text = request.data.get("text")  # –¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞

        if not psychologist_id or not rating:
            return Response(
                {"error": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –∏ —Ä–µ–π—Ç–∏–Ω–≥."},
                status=status.HTTP_400_BAD_REQUEST
            )

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º
            completed_session = Session.objects.filter(
                Q(client=client) & Q(psychologist_id=psychologist_id) & Q(status="COMPLETED")
            ).first()

            if not completed_session:
                return Response(
                    {"error": "–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ —Å —ç—Ç–∏–º –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º."},
                    status=status.HTTP_400_BAD_REQUEST
                )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –æ—Ç–∑—ã–≤ –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
            if Review.objects.filter(session=completed_session).exists():
                return Response(
                    {"error": "–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤ –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏."},
                    status=status.HTTP_400_BAD_REQUEST
                )

            # –°–æ–∑–¥–∞—ë–º –æ—Ç–∑—ã–≤
            review = Review.objects.create(
                session=completed_session,
                client_id=client.id,
                psychologist_id=psychologist_id,
                client_name=request.user.email,  # –ò–ª–∏ –¥—Ä—É–≥–æ–µ –ø–æ–ª–µ –¥–ª—è –§–ò–û
                psychologist_name=completed_session.psychologist.user.email,  # –ò–ª–∏ –¥—Ä—É–≥–æ–µ –ø–æ–ª–µ –¥–ª—è –§–ò–û
                rating=rating,
                text=text,
            )

            serializer = ReviewSerializer(review)
            return Response(serializer.data, status=status.HTTP_201_CREATED)

        except Exception as e:
            return Response({"error": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class LinkTelegramView(GenericAPIView):
    serializer_class = TelegramAuthSerializer

    def post(self, request):
        try:
            verification_code = request.data.get("verification_code")
            telegram_id = request.data.get("telegram_id")

            if not verification_code or not telegram_id:
                return Response({"error": "Verification code and Telegram ID are required."}, status=400)

            # üîπ –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–æ–¥ –≤ CustomUser
            user = CustomUser.objects.filter(verification_code=verification_code).first()
            if user:
                if user.verification_code_expiration and now() > user.verification_code_expiration:
                    return Response({"error": "Verification code has expired."}, status=400)

                user.telegram_id = telegram_id
                user.verification_code = None
                user.verification_code_expiration = None
                user.save()

                return Response({"message": "Telegram ID linked successfully (User)."}, status=200)

            # üîπ –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–æ–¥ –≤ QuickClientConsultationRequest
            consultation_request = QuickClientConsultationRequest.objects.filter(
                verification_code=verification_code
            ).first()
            if consultation_request:
                consultation_request.telegram_id = telegram_id
                consultation_request.save()

                return Response({"message": "Telegram ID linked successfully (Consultation Request)."}, status=200)

            return Response({"error": "Invalid verification code."}, status=400)

        except Exception as e:
            logger.error(f"Error linking Telegram: {str(e)}")
            return Response({"error": "Internal server error."}, status=500)


class TelegramAuthView(GenericAPIView):
    serializer_class = TelegramAuthSerializer

    @staticmethod
    def validate_telegram_auth(auth_data: dict, bot_token: str) -> bool:
        check_string = "\n".join([f"{k}={v}" for k, v in sorted(auth_data.items()) if k != "hash"])
        secret_key = sha256(bot_token.encode()).digest()
        expected_hash = hmac.new(secret_key, check_string.encode(), sha256).hexdigest()
        return expected_hash == auth_data.get("hash") and time.time() - int(auth_data["auth_date"]) < 86400

    def post(self, request, *args, **kwargs):
        try:
            auth_data = request.data
            bot_token = settings.TELEGRAM_BOT_TOKEN

            if not self.validate_telegram_auth(auth_data, bot_token):
                return Response({"error": "Invalid Telegram authentication"}, status=400)

            telegram_id = auth_data["id"]
            username = auth_data.get("username", "")
            first_name = auth_data.get("first_name", "")
            role = request.data.get("role", "client")

            user, created = CustomUser.objects.get_or_create(
                telegram_id=telegram_id,
                defaults={
                    "username": username,
                    "first_name": first_name,
                    "is_psychologist": role == "psychologist",
                }
            )

            if not created:
                user.username = username
                user.first_name = first_name
                if role == "psychologist" and not user.is_psychologist:
                    user.is_psychologist = True
                user.save()

            if created:
                if user.is_psychologist:
                    PsychologistProfile.objects.create(user=user)
                else:
                    ClientProfile.objects.create(user=user)

            refresh = RefreshToken.for_user(user)
            return Response({
                "message": "Authenticated successfully",
                "access_token": str(refresh.access_token),
                "refresh_token": str(refresh),
                "is_psychologist": user.is_psychologist,
            })

        except Exception as e:
            logger.error(f"Telegram auth failed: {str(e)}")
            return Response({"error": "Internal server error."}, status=500)


class VerificationCodeView(GenericAPIView):
    permission_classes = [IsAuthenticated]

    @extend_schema(
        summary="Get Current Verification Code",
        description="–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
        responses={
            200: OpenApiResponse(description="Verification code retrieved successfully."),
            404: OpenApiResponse(description="Verification code is not available or has expired."),
        },
    )
    def get(self, request):
        user = request.user
        if user.verification_code and (not user.verification_code_expiration or now() <= user.verification_code_expiration):
            return Response({
                "verification_code": user.verification_code,
                "message": "This is your current verification code.",
                "expires_at": user.verification_code_expiration
            }, status=200)
        else:
            return Response({
                "message": "Verification code is not available or has expired. Request a new code if needed."
            }, status=404)


class NewVerificationCodeView(GenericAPIView):
    permission_classes = [IsAuthenticated]

    @extend_schema(
        summary="Request New Verification Code",
        description="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
        responses={
            200: OpenApiResponse(
                description="A new verification code has been generated successfully.",
                examples=[
                    {
                        "new_verification_code": "1234",
                        "message": "A new verification code has been generated successfully.",
                        "expires_at": "2025-02-02T12:00:00Z"
                    }
                ],
            ),
            500: OpenApiResponse(description="Internal server error."),
        },
    )
    def post(self, request):
        try:
            user = request.user
            new_code = user.generate_new_verification_code()
            return Response({
                "new_verification_code": new_code,
                "message": "A new verification code has been generated successfully.",
                "expires_at": user.verification_code_expiration
            }, status=status.HTTP_200_OK)
        except Exception as e:
            return Response({"error": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

class AdminApprovePsychologistView(GenericAPIView):
    queryset = PsychologistApplication.objects.all()
    serializer_class = PsychologistApplicationSerializer
    permission_classes = [IsAdminUser]

    @extend_schema(
        responses={
            200: PsychologistApplicationSerializer(many=True),
        },
    )
    def get(self, request):
        applications = PsychologistApplication.objects.all()
        serializer = PsychologistApplicationSerializer(applications, many=True)
        return Response(serializer.data, status=status.HTTP_200_OK)

    @extend_schema(
        parameters=[
            OpenApiParameter("application_id", description="Application ID", required=True, type=int),
        ],
        responses={
            200: OpenApiResponse(description="Psychologist approved successfully."),
            400: OpenApiResponse(description="Invalid action."),
            404: OpenApiResponse(description="Application not found."),
        },
    )
    def post(self, request, application_id):
        try:
            application = PsychologistApplication.objects.get(id=application_id)

            if application.status != "PENDING":
                return Response(
                    {"error": "Application has already been reviewed."},
                    status=status.HTTP_400_BAD_REQUEST,
                )

            action = request.data.get("action")

            if action == "APPROVE":
                application.status = "APPROVED"
                application.save()

                user = application.user
                user.is_psychologist = True
                user.save()

                profile, _ = PsychologistProfile.objects.get_or_create(user=user)
                profile.is_verified = True
                profile.save()

                return Response(
                    {"message": "Psychologist approved successfully."},
                    status=status.HTTP_200_OK,
                )
            elif action == "REJECT":
                application.status = "REJECTED"
                application.save()
                return Response(
                    {"message": "Psychologist application rejected."},
                    status=status.HTTP_200_OK,
                )
            else:
                return Response(
                    {"error": "Invalid action."}, status=status.HTTP_400_BAD_REQUEST
                )

        except PsychologistApplication.DoesNotExist:
            return Response(
                {"error": "Application not found."}, status=status.HTTP_404_NOT_FOUND
            )

class TopicListView(APIView):
    def get(self, request):
        topics = Topic.objects.all()
        serializer = TopicSerializer(topics, many=True)
        return Response(serializer.data, status=status.HTTP_200_OK)

class BuyRequestsView(APIView):
    permission_classes = [IsAuthenticated, IsVerifiedPsychologist]
    serializer_class = BuyRequestSerializer

    @extend_schema(
        responses={
            200: OpenApiResponse(description="Request purchased successfully."),
            400: OpenApiResponse(description="Insufficient balance."),
        },
    )
    def post(self, request):
        user = request.user
        profile = user.psychologist_profile

        COST = 10.00

        if user.balance < COST:
            return Response(
                {"error": "Insufficient balance."}, status=status.HTTP_400_BAD_REQUEST
            )

        user.balance -= COST
        user.save()

        profile.requests_count += 1
        profile.save()

        purchase = PurchasedRequest.objects.create(psychologist=user, cost=COST)
        return Response(
            {
                "detail": "Request purchased successfully!",
                "remaining_balance": user.balance,
                "purchased_request_id": purchase.id,
                "requests_count": profile.requests_count,
            },
            status=status.HTTP_200_OK,
        )