from django.utils.timezone import now, timedelta
from ailaq.emails import send_approval_email, send_rejection_email
from django.db.models import Avg
from django.conf import settings
from django.db import models
from django.contrib.auth.models import AbstractBaseUser, BaseUserManager
import random

import logging
logger = logging.getLogger(__name__)

class CustomUserManager(BaseUserManager):
    def create_user(self, email=None, password=None, telegram_id=None, **extra_fields):
        if not email and not telegram_id:
            raise ValueError('Either Telegram ID or Email must be provided for registration.')

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        verification_code = self.generate_unique_verification_code()

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è email
        email = self.normalize_email(email) if email else None

        user = self.model(
            email=email,
            telegram_id=telegram_id,
            verification_code=verification_code,
            **extra_fields
        )

        if password:
            user.set_password(password)
        user.save(using=self._db)

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        if user.is_psychologist:
            PsychologistProfile.objects.get_or_create(user=user)
        else:
            ClientProfile.objects.get_or_create(user=user)

        return user

    def create_superuser(self, email, password=None, **extra_fields):
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)
        return self.create_user(email=email, password=password, **extra_fields)

    @staticmethod
    def generate_unique_verification_code():
        for _ in range(10):  # –ü–æ–ø—ã—Ç–∫–∏ –¥–æ 10 —Ä–∞–∑
            code = str(random.randint(1000, 9999))
            if not CustomUser.objects.filter(verification_code=code).exists():
                return code
        raise ValueError("Could not generate a unique verification code")

class CustomUser(AbstractBaseUser):
    telegram_id = models.BigIntegerField(unique=True, null=True, blank=True)
    email = models.EmailField(unique=True, null=True, blank=True)
    verification_code = models.CharField(max_length=4, unique=True, null=True, blank=True)
    verification_code_expiration = models.DateTimeField(null=True, blank=True)  # –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è

    is_psychologist = models.BooleanField(default=False)
    wants_to_be_psychologist = models.BooleanField(default=False)

    is_staff = models.BooleanField(default=False)
    is_superuser = models.BooleanField(default=False)
    balance = models.DecimalField(max_digits=10, decimal_places=2, default=0)

    objects = CustomUserManager()

    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = []

    def generate_verification_code(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è."""
        for _ in range(10):  # –î–æ 10 –ø–æ–ø—ã—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
            new_code = str(random.randint(1000, 9999))  # 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
            if not CustomUser.objects.filter(verification_code=new_code).exists():
                self.verification_code = new_code
                self.verification_code_expiration = now() + timedelta(minutes=10)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–æ–∫
                self.save(update_fields=['verification_code', 'verification_code_expiration'])
                return new_code
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")

    def generate_new_verification_code(self):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (4 —Ü–∏—Ñ—Ä—ã).
        –ï—Å–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –º–µ—Ç–æ–¥ –¥–µ–ª–∞–µ—Ç –¥–æ 10 –ø–æ–ø—ã—Ç–æ–∫.
        –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç.
        """
        for _ in range(10):  # –î–æ 10 –ø–æ–ø—ã—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
            new_code = str(random.randint(1000, 9999))  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
            if not CustomUser.objects.filter(verification_code=new_code).exists():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
                self.verification_code = new_code
                self.verification_code_expiration = now() + timedelta(minutes=10)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
                self.save(update_fields=['verification_code', 'verification_code_expiration'])  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                return new_code

        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ 10 –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥, –≤—ã–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")

    def __str__(self):
        return self.email or f"Telegram User {self.telegram_id}"

    @property
    def role(self):
        return 'PSYCHOLOGIST' if self.is_psychologist else 'CLIENT'

    def has_perm(self, perm, obj=None):
        return self.is_superuser

    def has_module_perms(self, app_label):
        return self.is_superuser

class ClientProfile(models.Model):
    user = models.OneToOneField(CustomUser, on_delete=models.CASCADE, related_name='client_profile')

    def __str__(self):
        return f"ClientProfile for {self.user.email or self.user.telegram_id}"

    @property
    def telegram_id(self):
        return self.user.telegram_id

class Topic(models.Model):
    name = models.CharField(max_length=100, unique=True, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã")

    def __str__(self):
        return self.name

class QuickClientConsultationRequest(models.Model):
    client_name = models.CharField(max_length=255, verbose_name="–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")
    birth_date = models.DateField(verbose_name="–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è")
    gender = models.CharField(
        max_length=10,
        choices=[('MALE', '–ú—É–∂—Å–∫–æ–π'), ('FEMALE', '–ñ–µ–Ω—Å–∫–∏–π')],
        verbose_name="–ü–æ–ª"
    )
    preferred_psychologist_age = models.CharField(
        max_length=20,
        choices=[('18-25', '–û—Ç 18 –¥–æ 25'), ('25-35', '–û—Ç 25 –¥–æ 35'), ('35+', '–û—Ç 35')],
        verbose_name="–í–æ–∑—Ä–∞—Å—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"
    )
    psychologist_gender = models.CharField(
        max_length=10,
        choices=[('MALE', '–ú—É–∂—Å–∫–æ–π'), ('FEMALE', '–ñ–µ–Ω—Å–∫–∏–π')],
        verbose_name="–ü–æ–ª —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"
    )
    psychologist_language = models.CharField(
        max_length=10,
        choices=[('RU', '–†—É—Å—Å–∫–∏–π'), ('EN', '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π'), ('KZ', '–ö–∞–∑–∞—Ö—Å–∫–∏–π')],
        verbose_name="–Ø–∑—ã–∫ –æ–±—â–µ–Ω–∏—è"
    )
    topic = models.CharField(max_length=255, verbose_name="–û—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–º–∞")
    additional_topics = models.ManyToManyField(
        'Topic',
        related_name='consultations',
        verbose_name="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–º—ã"
    )
    comments = models.TextField(verbose_name="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
    created_at = models.DateTimeField(default=now)
    verification_code = models.CharField(max_length=6, unique=True, blank=True, null=True,
                                         verbose_name="–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")

    # üîπ –î–æ–±–∞–≤–ª—è–µ–º telegram_id
    telegram_id = models.BigIntegerField(null=True, blank=True, verbose_name="Telegram ID –∫–ª–∏–µ–Ω—Ç–∞")

    def save(self, *args, **kwargs):
        if not self.verification_code:
            self.verification_code = str(random.randint(100000, 999999))
        super().save(*args, **kwargs)

    def __str__(self):
        return f"–ó–∞—è–≤–∫–∞ –æ—Ç {self.client_name} ({self.created_at.strftime('%Y-%m-%d %H:%M')})"


class PsychologistLevel(models.Model):
    name = models.CharField(max_length=50)
    can_see_catalog = models.BooleanField(default=False)
    can_see_quick_requests = models.BooleanField(default=False)
    can_accept_requests = models.BooleanField(default=False)
    can_edit_profile = models.BooleanField(default=False)
    can_change_block_status = models.BooleanField(default=False)
    duration_days = models.IntegerField(default=0)

    def __str__(self):
        return self.name

class EducationDocument(models.Model):
    psychologist_application = models.ForeignKey(
        'PsychologistApplication',
        related_name='education_documents',
        on_delete=models.CASCADE
    )
    document = models.FileField(upload_to='education_documents/')
    year = models.PositiveIntegerField(null=True, blank=True, help_text="–ì–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    title = models.CharField(max_length=255, null=True, blank=True, help_text="–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞")

    def __str__(self):
        return f"{self.year} - {self.title}"

# —Ñ–æ—Ä–º–∞ –∑–∞—è–≤–∫–∏/–ø—Ä–æ—Ñ–∏–ª—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞)
class PsychologistApplication(models.Model):
    user = models.OneToOneField(CustomUser, on_delete=models.CASCADE)

    # –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    first_name_ru = models.CharField(max_length=50, null=True, blank=True)
    last_name_ru = models.CharField(max_length=50, null=True, blank=True)
    middle_name_ru = models.CharField(max_length=50, null=True, blank=True)

    birth_date = models.DateField(null=True, blank=True)  # –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è

    gender_choices = [
        ('MALE', '–ú—É–∂—Å–∫–æ–π'),
        ('FEMALE', '–ñ–µ–Ω—Å–∫–∏–π'),
        ('OTHER', '–î—Ä—É–≥–æ–π'),
    ]
    gender = models.CharField(max_length=6, choices=gender_choices, null=True, blank=True)

    language_choices = [
        ('RU', '–†—É—Å—Å–∫–∏–π'),
        ('EN', '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π'),
        ('KZ', '–ö–∞–∑–∞—Ö—Å–∫–∏–π'),
    ]
    communication_language = models.CharField(max_length=2, choices=language_choices, null=True, blank=True)

    # **–°—Ç—Ä–∞–Ω–∞ –∏ –≥–æ—Ä–æ–¥ –ø—Ä–∏–µ–º–∞ (—Å–ø–∏—Å–æ–∫ —Å —Ñ—Ä–æ–Ω—Ç–∞)**
    service_countries = models.JSONField(default=list, blank=True, help_text="–°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω –ø—Ä–∏–µ–º–∞")
    service_cities = models.JSONField(default=list, blank=True, help_text="–°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –ø—Ä–∏–µ–º–∞")


    telegram_id = models.CharField(max_length=100, null=True, blank=True)  # –ù–∏–∫ –∏–ª–∏ ID –≤ Telegram
    phone_number = models.CharField(max_length=15, null=True, blank=True)  # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞

    # –û —Å–µ–±–µ
    about_me_ru = models.TextField(null=True, blank=True)

    # –ö–∞—Ç–∞–ª–æ–≥–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–∞—Ç–∞–ª–æ–≥–µ)
    catalog_description_ru = models.TextField(null=True, blank=True)

    # –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è (—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)
    qualification = models.CharField(max_length=100, null=True, blank=True)  # –ù–∞–ø—Ä–∏–º–µ—Ä "–ü—Å–∏—Ö–æ–ª–æ–≥"

    # –° –∫–µ–º —Ä–∞–±–æ—Ç–∞–µ—Ç (—Å–ø–∏—Å–æ–∫)
    works_with_choices = [
        ('ADULTS', '–í–∑—Ä–æ—Å–ª—ã–µ'),
        ('TEENAGERS', '–ü–æ–¥—Ä–æ—Å—Ç–∫–∏'),
        ('CHILDREN', '–î–µ—Ç–∏'),
        ('FAMILY', '–°–µ–º—å—è'),
    ]
    works_with = models.CharField(max_length=50, choices=works_with_choices, null=True, blank=True)

    # –° –∫–∞–∫–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
    problems_worked_with = models.TextField(null=True, blank=True)

    # –ú–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç—ã
    work_methods = models.TextField(null=True, blank=True)

    # –°—Ç–∞–∂ —Ä–∞–±–æ—Ç—ã (–≤ –≥–æ–¥–∞—Ö)
    experience_years = models.PositiveIntegerField(null=True, blank=True, verbose_name="–°—Ç–∞–∂ —Ä–∞–±–æ—Ç—ã (–≤ –≥–æ–¥–∞—Ö)")

    # –ù–∞—É—á–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å
    academic_degree = models.CharField(max_length=100, null=True, blank=True)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    additional_specialization = models.TextField(null=True, blank=True)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    additional_psychologist_directions = models.TextField(null=True, blank=True)

    # –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (JSON: –ì–æ–¥ + –ù–∞–∑–≤–∞–Ω–∏–µ)
    education = models.JSONField(default=list, blank=True, null=True)

    # –î–æ–∫—É–º–µ–Ω—Ç—ã –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏
    education_files = models.ManyToManyField('EducationDocument', blank=True, related_name='applications')

    # –ê–¥—Ä–µ—Å –æ—Ñ–∏—Å–∞
    country = models.CharField(max_length=100, null=True, blank=True, verbose_name="–°—Ç—Ä–∞–Ω–∞")
    city = models.CharField(max_length=100, null=True, blank=True, verbose_name="–ì–æ—Ä–æ–¥")
    office_address = models.TextField(null=True, blank=True, verbose_name="–ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –æ—Ñ–∏—Å–∞")

    # –§–æ—Ç–æ –æ—Ñ–∏—Å–∞
    office_photo = models.ImageField(upload_to='office_photos/', null=True, blank=True)

    # **–ü—Ä–∏–µ–º—ã (—Å–µ—Å—Å–∏–∏)**
    SESSION_TYPES = [
        ('INDIVIDUAL', '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'),
        ('COUPLE', '–ü–∞—Ä–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'),
        ('GROUP', '–ì—Ä—É–ø–ø–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'),
    ]

    ONLINE_OFFLINE_CHOICES = [
        ('ONLINE', '–û–Ω–ª–∞–π–Ω'),
        ('OFFLINE', '–û—Ñ—Ñ–ª–∞–π–Ω'),
    ]

    CURRENCY_CHOICES = [
        ('KZT', '–¢–µ–Ω–≥–µ'),
        ('RUB', '–†—É–±–ª–∏'),
        ('USD', '–î–æ–ª–ª–∞—Ä—ã'),
        ('EUR', '–ï–≤—Ä–æ'),
    ]

    service_sessions = models.JSONField(default=list, blank=True)

    # **–†–µ–π—Ç–∏–Ω–≥–∏ –∏ –∑–∞—è–≤–∫–∏**
    is_verified = models.BooleanField(default=False)
    is_in_catalog = models.BooleanField(default=False)

    purchased_applications = models.IntegerField(default=0)
    expired_applications = models.IntegerField(default=0)
    active_applications = models.IntegerField(default=0)
    paid_applications = models.IntegerField(default=0)
    unpaid_applications = models.IntegerField(default=0)

    rating_system = models.FloatField(default=0.0)
    internal_rating = models.FloatField(default=0.0)

    STATUS_CHOICES = [
        ('PENDING', 'Pending'),
        ('APPROVED', 'Approved'),
        ('REJECTED', 'Rejected'),
        ('DOCUMENTS_REQUESTED', 'Documents Requested'),
    ]
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='PENDING')
    documents_requested = models.BooleanField(default=False)

    # **–ú–µ—Ç–æ–¥—ã**
    def add_service_session(self, session_type, online_offline, country, city, duration, price, currency):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–∏–µ–º (—Å–µ—Å—Å–∏—é)."""
        session_data = {
            "session_type": session_type,
            "online_offline": online_offline,
            "country": country,
            "city": city,
            "duration": duration,
            "price": price,
            "currency": currency
        }
        new_sessions = self.service_sessions[:]  # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞
        new_sessions.append(session_data)
        self.service_sessions = new_sessions
        self.save(update_fields=['service_sessions'])

    def remove_service_session(self, index):
        """–£–¥–∞–ª—è–µ—Ç –ø—Ä–∏–µ–º (—Å–µ—Å—Å–∏—é) –ø–æ –∏–Ω–¥–µ–∫—Å—É."""
        if 0 <= index < len(self.service_sessions):
            new_sessions = self.service_sessions[:]
            del new_sessions[index]
            self.service_sessions = new_sessions
            self.save(update_fields=['service_sessions'])

    def add_education_document(self, document, year, title):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏."""
        if not document:
            raise ValueError("–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

        new_document = EducationDocument.objects.create(
            psychologist_application=self,
            document=document,
            year=year,
            title=title
        )
        self.education_files.add(new_document)
        self.save(update_fields=['education_files'])

    def remove_education_document(self, document_id):
        """
        –£–¥–∞–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏.
        """
        try:
            doc = self.education_files.get(id=document_id)
            doc.delete()
        except EducationDocument.DoesNotExist:
            pass

    def __str__(self):
        return f"–ó–∞—è–≤–∫–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ {self.user.email} (–°—Ç–∞–∂: {self.experience_years} –ª–µ—Ç)"

# **FAQ –ø—Å–∏—Ö–æ–ª–æ–≥–∞**
class PsychologistFAQ(models.Model):
    application = models.ForeignKey(
        'PsychologistApplication',
        related_name='faqs',
        on_delete=models.CASCADE
    )
    question = models.CharField(max_length=255)
    answer = models.TextField()

    def __str__(self):
        return f"FAQ: {self.question[:50]}..."

#–ø—Ä–æ—Ñ–∏–ª—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞
class PsychologistProfile(models.Model):
    user = models.OneToOneField(CustomUser, on_delete=models.CASCADE, related_name="psychologist_profile", unique=True)
    application = models.OneToOneField(
        PsychologistApplication,
        on_delete=models.CASCADE,
        related_name='profile',
        null=True,
        blank=True
    )

    is_in_catalog = models.BooleanField(default=False)
    requests_count = models.PositiveIntegerField(default=0)
    is_verified = models.BooleanField(default=False)  # –ü–æ–ª–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    def __str__(self):
        return f"PsychologistProfile for {self.user.email}"

    @property
    def telegram_id(self):
        return self.user.telegram_id

    def update_catalog_status(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å `is_in_catalog` –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç–æ–¥–∞ `can_be_in_catalog`."""
        self.is_in_catalog = self.can_be_in_catalog()
        self.save()

    @staticmethod
    def process_psychologist_application(application_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞."""
        try:
            application = PsychologistApplication.objects.get(id=application_id)

            if application.status == 'APPROVED':
                user = application.user
                user.is_psychologist = True
                user.save()

                profile, created = PsychologistProfile.objects.get_or_create(user=user)
                profile.is_verified = True
                profile.save()

                send_approval_email(application)

            elif application.status == 'REJECTED':
                send_rejection_email(application)
        except PsychologistApplication.DoesNotExist:
            logger.error(f"Application with ID {application_id} not found.")

    def get_average_rating(self):
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0.0, –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π –∏–ª–∏ –æ—Ç–∑—ã–≤–æ–≤.
        """
        sessions_qs = self.sessions.filter(status='COMPLETED')
        reviews_qs = Review.objects.filter(session__in=sessions_qs)
        average_rating = reviews_qs.aggregate(avg_rating=Avg('rating'))['avg_rating'] or 0.0
        return round(average_rating, 1)

    def get_reviews_count(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥–∞.
        """
        return Review.objects.filter(session__psychologist=self, session__status='COMPLETED').count()

def get_default_cost():
    return settings.REQUEST_COST

class PurchasedRequest(models.Model):
    psychologist = models.ForeignKey(CustomUser, on_delete=models.CASCADE)
    cost = models.DecimalField(
        max_digits=10,
        decimal_places=2,
        default=get_default_cost
    )
    created_at = models.DateTimeField(default=now)

    def __str__(self):
        return f"Purchase #{self.id} by {self.psychologist.email} on {self.created_at}"

class Session(models.Model):
    psychologist = models.ForeignKey(
        PsychologistProfile,
        on_delete=models.CASCADE,
        related_name='sessions'
    )
    client = models.ForeignKey(
        ClientProfile,
        on_delete=models.CASCADE,
        related_name='sessions'
    )
    start_time = models.DateTimeField()
    end_time = models.DateTimeField(null=True, blank=True)
    status_choices = [
        ('SCHEDULED', 'Scheduled'),
        ('COMPLETED', 'Completed'),
        ('CANCELED', 'Canceled'),
    ]
    status = models.CharField(max_length=10, choices=status_choices, default='SCHEDULED')

# –æ—Ç–∑—ã–≤ –∑–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
class Review(models.Model):
    session = models.OneToOneField(
        Session,
        on_delete=models.CASCADE,
        related_name='review'
    )
    client = models.ForeignKey(
        ClientProfile,
        on_delete=models.CASCADE,
        related_name='reviews'
    )
    psychologist = models.ForeignKey(
        PsychologistProfile,
        on_delete=models.CASCADE,
        related_name='reviews'
    )
    client_name = models.CharField(max_length=255)  # –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞
    psychologist_name = models.CharField(max_length=255)  # –§–ò–û –ø—Å–∏—Ö–æ–ª–æ–≥–∞
    rating = models.PositiveIntegerField(default=0)  # –†–µ–π—Ç–∏–Ω–≥ –æ—Ç 1 –¥–æ 5
    text = models.TextField(null=True, blank=True)  # –¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Review by {self.client_name or 'Unknown'} for {self.psychologist_name or 'Unknown'} (Rating: {self.rating})"

class Specialization(models.Model):
    name = models.CharField(max_length=255)

    def __str__(self):
        return self.name

class BuyRequest(models.Model):
    psychologist = models.ForeignKey(PsychologistProfile, on_delete=models.CASCADE, related_name='buy_requests')
    client = models.ForeignKey(ClientProfile, on_delete=models.CASCADE, related_name='buy_requests')
    request_date = models.DateTimeField(auto_now_add=True)
    status_choices = [
        ('PENDING', 'Pending'),
        ('ACCEPTED', 'Accepted'),
        ('DECLINED', 'Declined'),
    ]
    status = models.CharField(max_length=10, choices=status_choices, default='PENDING')

    def __str__(self):
        return f"BuyRequest from {self.client} to {self.psychologist}"